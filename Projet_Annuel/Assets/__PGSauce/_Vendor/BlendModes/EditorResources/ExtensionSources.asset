%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 9658d0526497a1c4d8e7f687d35a7421, type: 3}
  m_Name: ExtensionSources
  m_EditorClassIdentifier: 
  shaderExtensions:
  - packagePath: Camera
    files:
    - filePath: BlendModes-Camera-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/Camera/Overlay\" \r\n{\r\n\tProperties
        \r\n\t{\r\n\t\t_MainTex (\"Screen\", 2D) = \"\" {}\r\n\t\t_BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n\t}\r\n\t\r\n\tSubShader \r\n\t{\r\n\t\tZTest
        Always \r\n\t\tCull Off \r\n\t\tZWrite Off\r\n\t\tColorMask RGB \r\n\t\t\r\n\t\tPass
        \r\n\t\t{  \r\n\t\t\tCGPROGRAM\r\n\t\t\t\r\n\t\t\t#include \"UnityCG.cginc\"\r\n\t\t\t#include
        \"../../BlendModesCG.cginc\"\r\n\r\n\t\t\t#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\t\t\t#pragma vertex
        ComputeVertex\r\n\t\t\t#pragma fragment ComputeFragment\r\n\t\t\t\r\n\t\t\tsampler2D
        _MainTex;\r\n\t\t\thalf4 _MainTex_TexelSize;\r\n\t\t\thalf4 _UV_Transform
        = half4(1, 0, 0, 1);\r\n\t\t\tBLENDMODES_OVERLAY_VARIABLES\r\n\r\n\t\t\tstruct
        VertexInput\r\n            {\r\n                float4 Vertex : POSITION;\r\n               
        float2 TexCoord : TEXCOORD0;\r\n                \r\n            };\r\n\r\n\t\t\tstruct
        VertexOutput \r\n\t\t\t{\r\n\t\t\t\tfloat4 ScreenPos : SV_POSITION;\r\n\t\t\t\tfloat2
        ScreenUV[2] : TEXCOORD0;\r\n\t\t\t\tBLENDMODES_OVERLAY_TEX_COORD(2)\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tVertexOutput
        ComputeVertex(VertexInput vertexInput)\r\n\t\t\t{\r\n\t\t\t\tVertexOutput
        vertexOutput;\r\n\t\t\t\t\r\n\t\t\t\tvertexOutput.ScreenPos = UnityObjectToClipPos(vertexInput.Vertex);\r\n\t\t\t\t\r\n\t\t\t\tvertexOutput.ScreenUV[0]
        = float2(\r\n\t\t\t\t\tdot(vertexInput.TexCoord.xy, _UV_Transform.xy),\r\n\t\t\t\t\tdot(vertexInput.TexCoord.xy,
        _UV_Transform.zw)\r\n\t\t\t\t);\r\n\t\t\r\n\t\t\t\t#if UNITY_UV_STARTS_AT_TOP\r\n\t\t\t\tif(_MainTex_TexelSize.y
        < 0.0)\r\n\t\t\t\t\tvertexOutput.ScreenUV[0].y = 1.0 - vertexOutput.ScreenUV[0].y;\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\tBLENDMODES_TRANSFORM_OVERLAY_TEX(vertexOutput.ScreenUV[0],
        vertexOutput)\r\n\t\t\r\n\t\t\t\tvertexOutput.ScreenUV[1] =  vertexInput.TexCoord.xy;\t\r\n\t\t\t\treturn
        vertexOutput;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfixed4 ComputeFragment(VertexOutput
        vertexOutput) : SV_Target\r\n\t\t\t{\r\n                #if UNITY_SINGLE_PASS_STEREO\r\n               
        vertexOutput.ScreenUV[1] = TransformStereoScreenSpaceTex(vertexOutput.ScreenUV[1],
        vertexOutput.ScreenPos.w);\r\n                #endif \r\n\t\t\t\tfixed4 color
        = tex2D(_MainTex, vertexOutput.ScreenUV[1]);\r\n\r\n\t\t\t\tBLENDMODES_BLEND_PIXEL_OVERLAY(color,
        vertexOutput)\r\n\r\n\t\t\t\treturn color; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tENDCG\r\n\t\t}\r\n\t}\r\n\r\n\tFallback
        off\r\n}\r\n"
  - packagePath: CameraHsbc
    files:
    - filePath: BlendModes-CameraHsbc-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/CameraHsbc/Overlay\" \r\n{\r\n\tProperties
        \r\n\t{\r\n\t\t_MainTex (\"Screen\", 2D) = \"\" {}\r\n\t\t_Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n\t\t_Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n\t\t_Brightness(\"Brightness\",
        Range(-1.0, 1.0)) = 0\r\n\t\t_Contrast(\"Contrast\", Range(-1.0, 1.0)) =
        0\r\n\t\t_BLENDMODES_OverlayTexture(\"Overlay Texture\", 2D) = \"white\"
        {}\r\n        _BLENDMODES_OverlayColor(\"Overlay Color\", Color) = (1,1,1,1)\r\n\t}\r\n\t\r\n\tSubShader
        \r\n\t{\r\n\t\tZTest Always \r\n\t\tCull Off \r\n\t\tZWrite Off\r\n\t\tColorMask
        RGB \r\n\t\t\r\n\t\tPass \r\n\t\t{  \r\n\t\t\tCGPROGRAM\r\n\t\t\t\r\n\t\t\t#include
        \"UnityCG.cginc\"\r\n\t\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\t\t#pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\t\t\t#pragma
        vertex ComputeVertex\r\n\t\t\t#pragma fragment ComputeFragment\r\n\t\t\t\r\n\t\t\tsampler2D
        _MainTex;\r\n\t\t\thalf4 _MainTex_TexelSize;\r\n\t\t\thalf4 _UV_Transform
        = half4(1, 0, 0, 1);\r\n\t\t\tfixed _Hue, _Saturation, _Brightness, _Contrast;\r\n\t\t\tBLENDMODES_OVERLAY_VARIABLES\r\n\r\n\t\t\tstruct
        VertexInput\r\n            {\r\n                float4 Vertex : POSITION;\r\n               
        float2 TexCoord : TEXCOORD0;\r\n                \r\n            };\r\n\r\n\t\t\tstruct
        VertexOutput \r\n\t\t\t{\r\n\t\t\t\tfloat4 ScreenPos : SV_POSITION;\r\n\t\t\t\tfloat2
        ScreenUV[2] : TEXCOORD0;\r\n\t\t\t\tBLENDMODES_OVERLAY_TEX_COORD(2)\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tVertexOutput
        ComputeVertex(VertexInput vertexInput)\r\n\t\t\t{\r\n\t\t\t\tVertexOutput
        vertexOutput;\r\n\t\t\t\t\r\n\t\t\t\tvertexOutput.ScreenPos = UnityObjectToClipPos(vertexInput.Vertex);\r\n\t\t\t\t\r\n\t\t\t\tvertexOutput.ScreenUV[0]
        = float2(\r\n\t\t\t\t\tdot(vertexInput.TexCoord.xy, _UV_Transform.xy),\r\n\t\t\t\t\tdot(vertexInput.TexCoord.xy,
        _UV_Transform.zw)\r\n\t\t\t\t);\r\n\t\t\r\n\t\t\t\t#if UNITY_UV_STARTS_AT_TOP\r\n\t\t\t\tif(_MainTex_TexelSize.y
        < 0.0)\r\n\t\t\t\t\tvertexOutput.ScreenUV[0].y = 1.0 - vertexOutput.ScreenUV[0].y;\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\tBLENDMODES_TRANSFORM_OVERLAY_TEX(vertexOutput.ScreenUV[0],
        vertexOutput)\r\n\t\t\r\n\t\t\t\tvertexOutput.ScreenUV[1] =  vertexInput.TexCoord.xy;\t\r\n\t\t\t\treturn
        vertexOutput;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfixed4 ComputeFragment(VertexOutput
        vertexOutput) : SV_Target\r\n\t\t\t{\r\n                #if UNITY_SINGLE_PASS_STEREO\r\n               
        vertexOutput.ScreenUV[1] = TransformStereoScreenSpaceTex(vertexOutput.ScreenUV[1],
        vertexOutput.ScreenPos.w);\r\n                #endif \r\n\t\t\t\tfixed4 color
        = tex2D(_MainTex, vertexOutput.ScreenUV[1]);\r\n\r\n\t\t\t\tBLENDMODES_BLEND_PIXEL_OVERLAY(color,
        vertexOutput)\r\n\r\n\t\t\t\tcolor.rgb = ApplyHsbc(color.rgb, fixed4(_Hue,
        _Saturation, _Brightness, _Contrast));\r\n\r\n\t\t\t\treturn color; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tENDCG\r\n\t\t}\r\n\t}\r\n\r\n\tFallback
        off\r\n}\r\n"
  - packagePath: DiffuseTransparent
    files:
    - filePath: BlendModes-DiffuseTransparent-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/DiffuseTransparent/Grab\"
        {\r\nProperties {\r\n    _Color (\"Main Color\", Color) = (1,1,1,1)\r\n   
        _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\" {}\r\n    \r\n}\r\n\r\nSubShader
        {\r\n    Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        }\r\n    LOD 200\r\n\r\nGrabPass { }\r\n\r\nCGPROGRAM\r\n#pragma surface
        surf Lambert vertex:vert alpha:fade\r\n#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n#include \"../../BlendModesCG.cginc\"\r\n\r\nsampler2D
        _MainTex;\r\nfixed4 _Color;\r\nBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\nstruct
        Input {\r\n    float2 uv_MainTex;\r\n    BLENDMODES_GRAB_POSITION(0)\r\n};\r\n\r\nvoid
        vert (inout appdata_full v, out Input o)\r\n{\r\n    UNITY_INITIALIZE_OUTPUT(Input,
        o);\r\n    float4 vertex = UnityObjectToClipPos(v.vertex);\r\n    BLENDMODES_COMPUTE_GRAB_POSITION(o,
        vertex)\r\n}\r\n\r\nvoid surf (Input IN, inout SurfaceOutput o) {\r\n   
        fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\r\n    BLENDMODES_BLEND_PIXEL_GRAB(c,
        IN)\r\n    o.Albedo = lerp(grabColor.rgb, c.rgb, c.a);\r\n    o.Alpha = c.a;\r\n}\r\nENDCG\r\n}\r\n\r\nFallback
        \"Legacy Shaders/Diffuse\"\r\n}\r\n"
    - filePath: BlendModes-DiffuseTransparent-UnifiedGrab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/DiffuseTransparent/UnifiedGrab\"
        {\r\nProperties {\r\n    _Color (\"Main Color\", Color) = (1,1,1,1)\r\n   
        _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\" {}\r\n    \r\n}\r\n\r\nSubShader
        {\r\n    Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        }\r\n    LOD 200\r\n\r\nGrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\nCGPROGRAM\r\n#pragma
        surface surf Lambert vertex:vert alpha:fade\r\n#pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n#include
        \"../../BlendModesCG.cginc\"\r\n\r\nsampler2D _MainTex;\r\nfixed4 _Color;\r\nBLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\nstruct
        Input {\r\n    float2 uv_MainTex;\r\n    BLENDMODES_GRAB_POSITION(0)\r\n};\r\n\r\nvoid
        vert (inout appdata_full v, out Input o)\r\n{\r\n    UNITY_INITIALIZE_OUTPUT(Input,
        o);\r\n    float4 vertex = UnityObjectToClipPos(v.vertex);\r\n    BLENDMODES_COMPUTE_GRAB_POSITION(o,
        vertex)\r\n}\r\n\r\nvoid surf (Input IN, inout SurfaceOutput o) {\r\n   
        fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\r\n    BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(c,
        IN)\r\n    o.Albedo = lerp(grabColor.rgb, c.rgb, c.a);\r\n    o.Alpha = c.a;\r\n}\r\nENDCG\r\n}\r\n\r\nFallback
        \"Legacy Shaders/Diffuse\"\r\n}\r\n"
  - packagePath: LwrpParticlesAdditive
    files:
    - filePath: BlendModes-LwrpParticlesAdditive-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpParticlesAdditive/Framebuffer\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            Tags\r\n            {\r\n                \"LightMode\"
        = \"BlendModeEffect\"\r\n            }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n\r\n                #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                #pragma only_renderers framebufferfetch\r\n               
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                \r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        \r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                void frag(v2f i, inout fixed4 buffer
        : SV_Target)\r\n                \r\n                {\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float sceneZ = LinearEyeDepth
        (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));\r\n                   
        float partZ = i.projPos.z;\r\n                    float fade = saturate (_InvFade
        * (sceneZ-partZ));\r\n                    i.color.a *= fade;\r\n                   
        #endif\r\n\r\n                    fixed4 col = i.color * _TintColor * tex2D(_MainTex,
        i.texcoord);\r\n                    BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col,
        fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        buffer = col;\r\n                    \r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-LwrpParticlesAdditive-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpParticlesAdditive/Grab\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            Tags\r\n            {\r\n                \"LightMode\"
        = \"BlendModeEffect\"\r\n            }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n\r\n                #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_GRAB_POSITION(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_GRAB(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-LwrpParticlesAdditive-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpParticlesAdditive/Overlay\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            Tags\r\n            {\r\n                \"LightMode\"
        = \"BlendModeEffect\"\r\n            }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n\r\n                #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord, o)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_OVERLAY(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
  - packagePath: LwrpSpritesDefault
    files:
    - filePath: BlendModes-LwrpSpritesDefault-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesDefault/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        Pass\r\n        {\r\n\r\n            CGPROGRAM\r\n\r\n            #define
        BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            #pragma only_renderers framebufferfetch\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            void SpriteFrag(v2f IN,
        inout fixed4 buffer : SV_Target)\r\n            \r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(c.rgb, buffer.rgb)\r\n               
        c.rgb *= c.a;\r\n                buffer = c;\r\n                \r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpSpritesDefault-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesDefault/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        Pass\r\n        {\r\n\r\n            CGPROGRAM\r\n\r\n            #define
        BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpSpritesDefault-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesDefault/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        Pass\r\n        {\r\n\r\n            CGPROGRAM\r\n\r\n            #define
        BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(refcoords,
        OUT)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n                OUT.vertex
        = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
  - packagePath: LwrpSpritesVectorGradient
    files:
    - filePath: BlendModes-LwrpSpritesVectorGradient-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesVectorGradient/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n            \"LightMode\" = \"BlendModeEffect\"\r\n       
        }\r\n        LOD 100\r\n\r\n        Cull Off\r\n        Lighting Off\r\n       
        ZWrite Off\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n        Pass\r\n       
        {\r\n            CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        #pragma only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                // Gradient settings are stored in 3
        consecutive texels:\r\n                // - texel 0: (float4, 1 byte per
        float)\r\n                //    x = gradient type (0 = tex/linear, 1 = radial)\r\n               
        //    y = address mode (0 = wrap, 1 = clamp, 2 = mirror)\r\n               
        //    z = radialFocus.x\r\n                //    w = radialFocus.y\r\n               
        // - texel 1: (float2, 2 bytes per float) atlas entry position\r\n               
        //    xy = pos.x\r\n                //    zw = pos.y\r\n                //
        - texel 2: (float2, 2 bytes per float) atlas entry size\r\n               
        //    xy = size.x\r\n                //    zw = size.y\r\n\r\n               
        int settingBase = ((int)(i.settingIndex.x + 0.5f)) * 3;\r\n               
        float2 texelSize = _MainTex_TexelSize.xy;\r\n                float2 settingUV
        = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n                float2
        uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex, settingUV);\r\n               
        if (gradSettings.x > 0.0f)\r\n                {\r\n                    //
        Radial texture case\r\n                    float2 focus = (gradSettings.zw
        - float2(0.5f, 0.5f)) * 2.0f; // bring focus in the (-1,1) range                   
        \r\n                    uv = float2(radialAddress(i.uv, focus), 0.0);\r\n               
        }\r\n\r\n                int addressing = gradSettings.y * 255;\r\n               
        uv.x = (addressing == 0) ? fmod(uv.x,1.0f) : uv.x; // Wrap\r\n               
        uv.x = (addressing == 1) ? max(min(uv.x,1.0f), 0.0f) : uv.x; // Clamp\r\n               
        float w = fmod(uv.x,2.0f);\r\n                uv.x = (addressing == 2) ?
        (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; // Mirror\r\n\r\n               
        // Adjust UV to atlas position\r\n                float2 nextUV = float2(texelSize.x,
        0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex, settingUV+nextUV)
        * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n                float2 size
        = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(resultColor.rgb, buffer.rgb)\r\n               
        buffer = resultColor;\r\n                \r\n            }\r\n           
        ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpSpritesVectorGradient-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesVectorGradient/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n            \"LightMode\" = \"BlendModeEffect\"\r\n       
        }\r\n        LOD 100\r\n\r\n        Cull Off\r\n        Lighting Off\r\n       
        ZWrite Off\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n        Pass\r\n       
        {\r\n            CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_GRAB_POSITION(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                return o;\r\n            }\r\n\r\n           
        float2 unpackFloat2(fixed4 c)\r\n            {\r\n                return
        float2(c.r*255 + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n           
        float2 rayUnitCircleFirstHit(float2 rayStart, float2 rayDir)\r\n           
        {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n   
        }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpSpritesVectorGradient-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpSpritesVectorGradient/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n            \"LightMode\" = \"BlendModeEffect\"\r\n       
        }\r\n        LOD 100\r\n\r\n        Cull Off\r\n        Lighting Off\r\n       
        ZWrite Off\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n        Pass\r\n       
        {\r\n            CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.uv,
        o)\r\n                return o;\r\n            }\r\n\r\n            float2
        unpackFloat2(fixed4 c)\r\n            {\r\n                return float2(c.r*255
        + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n            float2 rayUnitCircleFirstHit(float2
        rayStart, float2 rayDir)\r\n            {\r\n                float tca =
        dot(-rayStart, rayDir);\r\n                float d2 = dot(rayStart, rayStart)
        - tca * tca;\r\n                float thc = sqrt(1.0f - d2);\r\n               
        float t0 = tca - thc;\r\n                float t1 = tca + thc;\r\n               
        float t = min(t0, t1);\r\n                if (t < 0.0f)\r\n                   
        t = max(t0, t1);\r\n                return rayStart + rayDir * t;\r\n           
        }\r\n\r\n            float radialAddress(float2 uv, float2 focus)\r\n           
        {\r\n                uv = (uv - float2(0.5f, 0.5f)) * 2.0f;\r\n               
        float2 pointOnPerimeter = rayUnitCircleFirstHit(focus, normalize(uv - focus));\r\n               
        float2 diff = pointOnPerimeter - focus;\r\n                if (abs(diff.x)
        > 0.0001f)\r\n                    return (uv.x - focus.x) / diff.x;\r\n               
        if (abs(diff.y) > 0.0001f)\r\n                    return (uv.y - focus.y)
        / diff.y;\r\n                return 0.0f;\r\n            }\r\n\r\n\t\t\t\r\n           
        fixed4 frag (v2f i) : SV_Target\r\n            {\r\n                // Gradient
        settings are stored in 3 consecutive texels:\r\n                // - texel
        0: (float4, 1 byte per float)\r\n                //    x = gradient type
        (0 = tex/linear, 1 = radial)\r\n                //    y = address mode (0
        = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n   
        }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
  - packagePath: LwrpTMProMobileDistanceField
    files:
    - filePath: BlendModes-LwrpTMProMobileDistanceField-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpTMProMobileDistanceField/Framebuffer\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n}\r\n\r\nSubShader {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n       
        \"IgnoreProjector\"=\"True\"\r\n        \"RenderType\"=\"Transparent\"\r\n       
        \"LightMode\" = \"BlendModeEffect\"\r\n    }\r\n\r\n    Cull [_CullMode]\r\n   
        ZWrite Off\r\n    Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    Pass
        {\r\n        CGPROGRAM\r\n\r\n        #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n       
        #pragma vertex VertShader\r\n        #pragma fragment PixShader\r\n       
        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma shader_feature __
        UNDERLAY_ON UNDERLAY_INNER\r\n        #pragma only_renderers framebufferfetch\r\n\r\n       
        #pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile
        __ UNITY_UI_ALPHACLIP\r\n        #pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include
        \"UnityCG.cginc\"\r\n        #include \"UnityUI.cginc\"\r\n        // #include
        \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        void PixShader(pixel_t input, inout fixed4
        buffer : SV_Target)\r\n        \r\n        {\r\n            BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(input.faceColor.rgb,
        buffer.rgb)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a
        * input.param.x;\r\n            half4 c = input.faceColor * saturate(d -
        input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            buffer = c;\r\n           
        \r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-LwrpTMProMobileDistanceField-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpTMProMobileDistanceField/Grab\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n}\r\n\r\nSubShader {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n       
        \"IgnoreProjector\"=\"True\"\r\n        \"RenderType\"=\"Transparent\"\r\n       
        \"LightMode\" = \"BlendModeEffect\"\r\n    }\r\n\r\n    Cull [_CullMode]\r\n   
        ZWrite Off\r\n    Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    Pass
        {\r\n        CGPROGRAM\r\n\r\n        #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n       
        #pragma vertex VertShader\r\n        #pragma fragment PixShader\r\n       
        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma shader_feature __
        UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma multi_compile
        __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        BLENDMODES_GRAB_POSITION(5)\r\n        };\r\n\r\n        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n       
        pixel_t VertShader(vertex_t input)\r\n        {\r\n            float bold
        = step(input.texcoord1.y, 0);\r\n\r\n            float4 vert = input.vertex;\r\n           
        vert.x += _VertexOffsetX;\r\n            vert.y += _VertexOffsetY;\r\n           
        float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n            float2
        pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX, _ScaleY)
        * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n            \r\n           
        float scale = rsqrt(dot(pixelSize, pixelSize));\r\n            scale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3] == 0) scale
        = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                ComputeGrabScreenPos(vPosition)\r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            BLENDMODES_BLEND_PIXEL_GRAB(input.faceColor,
        input)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a * input.param.x;\r\n           
        half4 c = input.faceColor * saturate(d - input.param.w);\r\n            \r\n       
        #ifdef OUTLINE_ON\r\n            c = lerp(input.outlineColor, input.faceColor,
        saturate(d - input.param.z));\r\n            c *= saturate(d - input.param.y);\r\n       
        #endif\r\n\r\n        #if UNDERLAY_ON\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y)
        * (1 - c.a);\r\n        #endif\r\n\r\n        #if UNDERLAY_INNER\r\n           
        half sd = saturate(d - input.param.z);\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y))
        * sd * (1 - c.a);\r\n        #endif\r\n\r\n        // Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n        #if UNITY_UI_CLIP_RECT\r\n           
        half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n           
        c *= m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
  - packagePath: LwrpUIDefault
    files:
    - filePath: BlendModes-LwrpUIDefault-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefault/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        only_renderers framebufferfetch\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n   
        }\r\n\r\n    Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUIDefault-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefault/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUIDefault-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefault/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
  - packagePath: LwrpUIDefaultFont
    files:
    - filePath: BlendModes-LwrpUIDefaultFont-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefaultFont/Framebuffer\"
        \r\n{\r\n    Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font
        Texture\", 2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        only_renderers framebufferfetch\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n   
        }\r\n\r\n    Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUIDefaultFont-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefaultFont/Grab\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUIDefaultFont-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUIDefaultFont/Overlay\"
        \r\n{\r\n    Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font
        Texture\", 2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n           
        \"LightMode\" = \"BlendModeEffect\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        Pass\r\n        {\r\n        CGPROGRAM\r\n\r\n            #define BLENDMODES_GRAB_TEXTURE
        _BLENDMODES_LwrpGrabTexture\r\n\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
  - packagePath: LwrpUnlitTransparent
    files:
    - filePath: BlendModes-LwrpUnlitTransparent-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUnlitTransparent/Framebuffer\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n}\r\n\r\nSubShader
        {\r\n    Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"LightMode\" = \"BlendModeEffect\"}\r\n    LOD 100\r\n\r\n    ZWrite Off\r\n   
        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n    Pass {\r\n        CGPROGRAM\r\n\r\n           
        #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            #pragma
        only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            void frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord)
        * _Color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        buffer = col;\r\n                \r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUnlitTransparent-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUnlitTransparent/Grab\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n}\r\n\r\nSubShader
        {\r\n    Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"LightMode\" = \"BlendModeEffect\"}\r\n    LOD 100\r\n\r\n    ZWrite Off\r\n   
        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n    Pass {\r\n        CGPROGRAM\r\n\r\n           
        #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            struct appdata_t
        {\r\n                float4 vertex : POSITION;\r\n                float2
        texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_GRAB_POSITION(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-LwrpUnlitTransparent-Overlay.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/LwrpUnlitTransparent/Overlay\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n}\r\n\r\nSubShader
        {\r\n    Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"LightMode\" = \"BlendModeEffect\"}\r\n    LOD 100\r\n\r\n    ZWrite Off\r\n   
        Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n    Pass {\r\n        CGPROGRAM\r\n\r\n           
        #define BLENDMODES_GRAB_TEXTURE _BLENDMODES_LwrpGrabTexture\r\n\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            struct appdata_t
        {\r\n                float4 vertex : POSITION;\r\n                float2
        texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord,
        o)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
  - packagePath: ParticlesAdditive
    files:
    - filePath: BlendModes-ParticlesAdditive-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/Framebuffer\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        \r\n    }\r\n\r\n   
        Category {\r\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\"
        \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\" }\r\n        Blend
        SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n        Cull Off Lighting
        Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n            \r\n\r\n           
        Pass {\r\n\r\n                CGPROGRAM\r\n                #pragma vertex
        vert\r\n                #pragma fragment frag\r\n                #pragma
        target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                #pragma only_renderers framebufferfetch\r\n               
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                \r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        \r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                void frag(v2f i, inout fixed4 buffer
        : SV_Target)\r\n                \r\n                {\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float sceneZ = LinearEyeDepth
        (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));\r\n                   
        float partZ = i.projPos.z;\r\n                    float fade = saturate (_InvFade
        * (sceneZ-partZ));\r\n                    i.color.a *= fade;\r\n                   
        #endif\r\n\r\n                    fixed4 col = i.color * _TintColor * tex2D(_MainTex,
        i.texcoord);\r\n                    BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col,
        fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        buffer = col;\r\n                    \r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/FramebufferMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            \r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        #pragma only_renderers framebufferfetch\r\n                #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                void frag(v2f i, inout fixed4 buffer
        : SV_Target)\r\n                \r\n                {\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float sceneZ = LinearEyeDepth
        (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));\r\n                   
        float partZ = i.projPos.z;\r\n                    float fade = saturate (_InvFade
        * (sceneZ-partZ));\r\n                    i.color.a *= fade;\r\n                   
        #endif\r\n\r\n                    fixed4 col = i.color * _TintColor * tex2D(_MainTex,
        i.texcoord);\r\n                    BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col,
        fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        buffer = col;\r\n                    \r\n                }\r\n               
        ENDCG\r\n            }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0));
        // fog towards black due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/Grab\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        \r\n    }\r\n\r\n   
        Category {\r\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\"
        \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\" }\r\n        Blend
        SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n        Cull Off Lighting
        Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n            GrabPass { }\r\n\r\n           
        Pass {\r\n\r\n                CGPROGRAM\r\n                #pragma vertex
        vert\r\n                #pragma fragment frag\r\n                #pragma
        target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_GRAB_POSITION(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_GRAB(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/GrabMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            GrabPass { }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        \r\n                #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n               
        struct appdata_t {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_GRAB(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0));
        // fog towards black due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/Overlay\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n\r\n    Category {\r\n        Tags
        { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            \r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        \r\n                #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                BLENDMODES_OVERLAY_VARIABLES\r\n\r\n               
        struct appdata_t {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_OVERLAY_TEX_COORD(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord,
        o)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_OVERLAY(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/OverlayMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\"
        }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n       
        Cull Off Lighting Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n           
        \r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n\r\n                v2f
        vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord, o)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_OVERLAY(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0));
        // fog towards black due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/UnifiedGrab\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        \r\n    }\r\n\r\n   
        Category {\r\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\"
        \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\" }\r\n        Blend
        SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n        Cull Off Lighting
        Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n            GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesAdditive-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesAdditive/UnifiedGrabMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col, i)\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0));
        // fog towards black due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
  - packagePath: ParticlesHsbc
    files:
    - filePath: BlendModes-ParticlesHsbc-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/Framebuffer\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            \r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        #pragma only_renderers framebufferfetch\r\n                #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness,
        _Contrast;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                void frag(v2f i, inout fixed4 buffer
        : SV_Target)\r\n                \r\n                {\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float sceneZ = LinearEyeDepth
        (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));\r\n                   
        float partZ = i.projPos.z;\r\n                    float fade = saturate (_InvFade
        * (sceneZ-partZ));\r\n                    i.color.a *= fade;\r\n                   
        #endif\r\n\r\n                    fixed4 col = 2.0f * i.color * _TintColor
        * tex2D(_MainTex, i.texcoord);\r\n                    BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue,
        _Saturation, _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        buffer = col;\r\n                    \r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/FramebufferMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\"
        }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n       
        Cull Off Lighting Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n           
        \r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                #pragma only_renderers framebufferfetch\r\n               
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                \r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n                fixed _Hue,
        _Saturation, _Brightness, _Contrast;\r\n\r\n                v2f vert (appdata_t
        v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        \r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                void frag(v2f i, inout fixed4 buffer
        : SV_Target)\r\n                \r\n                {\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float sceneZ = LinearEyeDepth
        (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));\r\n                   
        float partZ = i.projPos.z;\r\n                    float fade = saturate (_InvFade
        * (sceneZ-partZ));\r\n                    i.color.a *= fade;\r\n                   
        #endif\r\n\r\n                    fixed4 col = 2.0f * i.color * _TintColor
        * tex2D(_MainTex, i.texcoord);\r\n                    BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue,
        _Saturation, _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        buffer = col;\r\n                    \r\n                }\r\n               
        ENDCG\r\n            }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness,
        _Contrast;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation,
        _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/Grab\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            GrabPass { }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        \r\n                #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n               
        struct appdata_t {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n\r\n               
        v2f vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_GRAB(col, i)\r\n                    col.rgb = ApplyHsbc(col.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/GrabMasked\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\"
        }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n       
        Cull Off Lighting Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n           
        GrabPass { }\r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_GRAB_POSITION(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n                fixed _Hue,
        _Saturation, _Brightness, _Contrast;\r\n\r\n                v2f vert (appdata_t
        v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_GRAB(col, i)\r\n                    col.rgb = ApplyHsbc(col.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness,
        _Contrast;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation,
        _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/Overlay\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay Texture\",
        2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay Color\",
        Color) = (1,1,1,1)\r\n    }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\"
        }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n       
        Cull Off Lighting Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n           
        \r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n                fixed _Hue,
        _Saturation, _Brightness, _Contrast;\r\n\r\n                v2f vert (appdata_t
        v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord, o)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_OVERLAY(col, i)\r\n                    col.rgb = ApplyHsbc(col.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/OverlayMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay Texture\",
        2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay Color\",
        Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float) = 0\r\n       
        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\", Float) = 0\r\n       
        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\", Float) = 1\r\n   
        }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\"
        \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\" }\r\n        Blend
        SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n        Cull Off Lighting
        Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n            \r\n\r\n           
        Pass {\r\n\r\n                CGPROGRAM\r\n                #pragma vertex
        vert\r\n                #pragma fragment frag\r\n                #pragma
        target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n                struct appdata_t {\r\n                   
        float4 vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n               
        };\r\n\r\n                float4 _MainTex_ST;\r\n                fixed _Hue,
        _Saturation, _Brightness, _Contrast;\r\n\r\n                v2f vert (appdata_t
        v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord, o)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_OVERLAY(col, i)\r\n                    col.rgb = ApplyHsbc(col.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness,
        _Contrast;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation,
        _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/UnifiedGrab\" {\r\n   
        Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    Category {\r\n       
        Tags { \"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"
        \"PreviewType\"=\"Plane\" }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask RGB\r\n        Cull Off Lighting Off ZWrite Off\r\n\r\n       
        SubShader {\r\n\r\n            GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                #pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n                struct appdata_t
        {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n\r\n               
        v2f vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col, i)\r\n                    col.rgb
        = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard Unlit\"\r\n}\r\n"
    - filePath: BlendModes-ParticlesHsbc-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/ParticlesHsbc/UnifiedGrabMasked\"
        {\r\n    Properties {\r\n        _TintColor (\"Tint Color\", Color) = (0.5,0.5,0.5,0.5)\r\n       
        _MainTex (\"Particle Texture\", 2D) = \"white\" {}\r\n        _InvFade (\"Soft
        Particles Factor\", Range(0.01,3.0)) = 1.0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    Category {\r\n        Tags { \"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\" \"PreviewType\"=\"Plane\"
        }\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask RGB\r\n       
        Cull Off Lighting Off ZWrite Off\r\n\r\n        SubShader {\r\n\r\n           
        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n            Pass {\r\n\r\n               
        CGPROGRAM\r\n                #pragma vertex vert\r\n                #pragma
        fragment frag\r\n                #pragma target 2.0\r\n                #pragma
        multi_compile_particles\r\n                #pragma multi_compile_fog\r\n               
        \r\n                #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n                #include \"UnityCG.cginc\"\r\n               
        #include \"../../BlendModesCG.cginc\"\r\n\r\n                sampler2D _MainTex;\r\n               
        fixed4 _TintColor;\r\n                BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n               
        struct appdata_t {\r\n                    float4 vertex : POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        \r\n                    UNITY_VERTEX_INPUT_INSTANCE_ID\r\n               
        };\r\n\r\n                struct v2f {\r\n                    float4 vertex
        : SV_POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    UNITY_FOG_COORDS(1)\r\n                   
        #ifdef SOFTPARTICLES_ON\r\n                    float4 projPos : TEXCOORD2;\r\n                   
        #endif\r\n                    BLENDMODES_GRAB_POSITION(3)\r\n                   
        UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n                float4
        _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n\r\n               
        v2f vert (appdata_t v)\r\n                {\r\n                    v2f o;\r\n                   
        UNITY_SETUP_INSTANCE_ID(v);\r\n                    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                   
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef
        SOFTPARTICLES_ON\r\n                    o.projPos = ComputeScreenPos (o.vertex);\r\n                   
        COMPUTE_EYEDEPTH(o.projPos.z);\r\n                    #endif\r\n                   
        o.color = v.color;\r\n                    o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                   
        BLENDMODES_COMPUTE_GRAB_POSITION(o, o.vertex)\r\n                    UNITY_TRANSFER_FOG(o,o.vertex);\r\n                   
        return o;\r\n                }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col, i)\r\n                    col.rgb
        = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                   
        UNITY_APPLY_FOG_COLOR(i.fogCoord, col, fixed4(0,0,0,0)); // fog towards black
        due to our blend mode\r\n\r\n                    \r\n                   
        return col;\r\n                }\r\n                ENDCG\r\n           
        }\r\n            Pass {\r\n\r\n                CGPROGRAM\r\n               
        #pragma vertex vert\r\n                #pragma fragment frag\r\n               
        #pragma target 2.0\r\n                #pragma multi_compile_particles\r\n               
        #pragma multi_compile_fog\r\n                \r\n                \r\n\r\n               
        #include \"UnityCG.cginc\"\r\n                #include \"../../BlendModesCG.cginc\"\r\n\r\n               
        sampler2D _MainTex;\r\n                fixed4 _TintColor;\r\n               
        \r\n\r\n                struct appdata_t {\r\n                    float4
        vertex : POSITION;\r\n                    fixed4 color : COLOR;\r\n                   
        float2 texcoord : TEXCOORD0;\r\n                    \r\n                   
        UNITY_VERTEX_INPUT_INSTANCE_ID\r\n                };\r\n\r\n               
        struct v2f {\r\n                    float4 vertex : SV_POSITION;\r\n                   
        fixed4 color : COLOR;\r\n                    float2 texcoord : TEXCOORD0;\r\n                   
        UNITY_FOG_COORDS(1)\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float4 projPos : TEXCOORD2;\r\n                    #endif\r\n                   
        \r\n                    UNITY_VERTEX_OUTPUT_STEREO\r\n                };\r\n\r\n               
        float4 _MainTex_ST;\r\n                fixed _Hue, _Saturation, _Brightness,
        _Contrast;\r\n\r\n                v2f vert (appdata_t v)\r\n               
        {\r\n                    v2f o;\r\n                    UNITY_SETUP_INSTANCE_ID(v);\r\n                   
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                    o.vertex
        = UnityObjectToClipPos(v.vertex);\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        o.projPos = ComputeScreenPos (o.vertex);\r\n                    COMPUTE_EYEDEPTH(o.projPos.z);\r\n                   
        #endif\r\n                    o.color = v.color;\r\n                    o.texcoord
        = TRANSFORM_TEX(v.texcoord,_MainTex);\r\n                    \r\n                   
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                    return o;\r\n               
        }\r\n\r\n                UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture);\r\n               
        float _InvFade;\r\n\r\n                \r\n                fixed4 frag (v2f
        i) : SV_Target\r\n                {\r\n                    #ifdef SOFTPARTICLES_ON\r\n                   
        float sceneZ = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture,
        UNITY_PROJ_COORD(i.projPos)));\r\n                    float partZ = i.projPos.z;\r\n                   
        float fade = saturate (_InvFade * (sceneZ-partZ));\r\n                   
        i.color.a *= fade;\r\n                    #endif\r\n\r\n                   
        fixed4 col = 2.0f * i.color * _TintColor * tex2D(_MainTex, i.texcoord);\r\n                   
        \r\n                    col.rgb = ApplyHsbc(col.rgb, fixed4(_Hue, _Saturation,
        _Brightness, _Contrast));\r\n                    UNITY_APPLY_FOG_COLOR(i.fogCoord,
        col, fixed4(0,0,0,0)); // fog towards black due to our blend mode\r\n\r\n                   
        \r\n                    return col;\r\n                }\r\n               
        ENDCG\r\n            }\r\n        }\r\n    }\r\n    Fallback \"Particles/Standard
        Unlit\"\r\n}\r\n"
  - packagePath: SpritesDefault
    files:
    - filePath: BlendModes-SpritesDefault-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n       
        {\r\n\r\n            \r\n\r\n            CGPROGRAM\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            #pragma only_renderers framebufferfetch\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            void SpriteFrag(v2f IN,
        inout fixed4 buffer : SV_Target)\r\n            \r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(c.rgb, buffer.rgb)\r\n               
        c.rgb *= c.a;\r\n                buffer = c;\r\n                \r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/FramebufferMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n       
        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n           
        #pragma fragment SpriteFrag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_instancing\r\n            #pragma multi_compile_local
        _ PIXELSNAP_ON\r\n            #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n           
        #pragma only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            void SpriteFrag(v2f IN,
        inout fixed4 buffer : SV_Target)\r\n            \r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(c.rgb, buffer.rgb)\r\n               
        c.rgb *= c.a;\r\n                buffer = c;\r\n                \r\n           
        }\r\n            ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n           
        #pragma fragment SpriteFrag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_instancing\r\n            #pragma multi_compile_local
        _ PIXELSNAP_ON\r\n            #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n           
        \r\n            \r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            \r\n            fixed4
        SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n                fixed4
        c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n                \r\n               
        c.rgb *= c.a;\r\n                \r\n                return c;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n\r\n            \r\n\r\n            CGPROGRAM\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/GrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n           
        #pragma fragment SpriteFrag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_instancing\r\n            #pragma multi_compile_local
        _ PIXELSNAP_ON\r\n            #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            \r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            \r\n            fixed4
        SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n                fixed4
        c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n                \r\n               
        c.rgb *= c.a;\r\n                \r\n                return c;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n       
        {\r\n\r\n            \r\n\r\n            CGPROGRAM\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(refcoords,
        OUT)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n                OUT.vertex
        = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/OverlayMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_OVERLAY_VARIABLES\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(refcoords,
        OUT)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n                OUT.vertex
        = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            \r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            \r\n            fixed4
        SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n                fixed4
        c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n                \r\n               
        c.rgb *= c.a;\r\n                \r\n                return c;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/UnifiedGrab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n\r\n            \r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesDefault-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesDefault/UnifiedGrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(c, IN)\r\n                c.rgb *= c.a;\r\n               
        \r\n                return c;\r\n            }\r\n            ENDCG\r\n       
        }\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            \r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                \r\n\r\n               
        #ifdef PIXELSNAP_ON\r\n                OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n               
        #endif\r\n\r\n                return OUT;\r\n            }\r\n\r\n           
        sampler2D _MainTex;\r\n            sampler2D _AlphaTex;\r\n\r\n           
        fixed4 SampleSpriteTexture (float2 uv)\r\n            {\r\n               
        fixed4 color = tex2D (_MainTex, uv);\r\n\r\n            #if ETC1_EXTERNAL_ALPHA\r\n               
        fixed4 alpha = tex2D (_AlphaTex, uv);\r\n                color.a = lerp (color.a,
        alpha.r, _EnableExternalAlpha);\r\n            #endif\r\n\r\n               
        return color;\r\n            }\r\n\r\n            \r\n            fixed4
        SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n                fixed4
        c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n                \r\n               
        c.rgb *= c.a;\r\n                \r\n                return c;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
  - packagePath: SpritesHsbc
    files:
    - filePath: BlendModes-SpritesHsbc-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n       
        {\r\n\r\n            \r\n\r\n            CGPROGRAM\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            #pragma only_renderers framebufferfetch\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        void SpriteFrag(v2f IN, inout fixed4 buffer : SV_Target)\r\n            \r\n           
        {\r\n                fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(c.rgb, buffer.rgb)\r\n               
        c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n               
        c.rgb *= c.a;\r\n                buffer = c;\r\n                \r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/FramebufferMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            #pragma only_renderers framebufferfetch\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        void SpriteFrag(v2f IN, inout fixed4 buffer : SV_Target)\r\n            \r\n           
        {\r\n                fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(c.rgb, buffer.rgb)\r\n               
        c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n               
        c.rgb *= c.a;\r\n                buffer = c;\r\n                \r\n           
        }\r\n            ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n           
        #pragma fragment SpriteFrag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_instancing\r\n            #pragma multi_compile_local
        _ PIXELSNAP_ON\r\n            #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n           
        \r\n            \r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        \r\n                c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness,
        _Contrast));\r\n                c.rgb *= c.a;\r\n                \r\n               
        return c;\r\n            }\r\n            ENDCG\r\n        }\r\n    }\r\n   
        Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n\r\n            \r\n\r\n            CGPROGRAM\r\n            #pragma
        vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/GrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        GrabPass { }\r\n\r\n        Pass\r\n        {\r\n\r\n            Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\r\n            Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        \r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        \r\n                c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness,
        _Contrast));\r\n                c.rgb *= c.a;\r\n                \r\n               
        return c;\r\n            }\r\n            ENDCG\r\n        }\r\n    }\r\n   
        Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay Texture\",
        2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay Color\",
        Color) = (1,1,1,1)\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n\r\n            \r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(refcoords,
        OUT)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n                OUT.vertex
        = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/OverlayMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_OverlayTexture(\"Overlay Texture\",
        2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay Color\",
        Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float) = 0\r\n       
        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\", Float) = 0\r\n       
        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\", Float) = 1\r\n   
        }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n        {\r\n           
        \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex SpriteVert\r\n            #pragma fragment SpriteFrag\r\n           
        #pragma target 2.0\r\n            #pragma multi_compile_instancing\r\n           
        #pragma multi_compile_local _ PIXELSNAP_ON\r\n            #pragma multi_compile
        _ ETC1_EXTERNAL_ALPHA\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n            float4 _MainTex_ST;\r\n           
        \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        // SpriteRenderer.Color while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(refcoords,
        OUT)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n                OUT.vertex
        = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\r\n            Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        \r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        \r\n                c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness,
        _Contrast));\r\n                c.rgb *= c.a;\r\n                \r\n               
        return c;\r\n            }\r\n            ENDCG\r\n        }\r\n    }\r\n   
        Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/UnifiedGrab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        \r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        Blend One OneMinusSrcAlpha\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n\r\n            \r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesHsbc-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesHsbc/UnifiedGrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n       
        [MaterialToggle] PixelSnap (\"Pixel snap\", Float) = 0\r\n        [HideInInspector]
        _RendererColor (\"RendererColor\", Color) = (1,1,1,1)\r\n        [HideInInspector]
        _Flip (\"Flip\", Vector) = (1,1,1,1)\r\n        [PerRendererData] _AlphaTex
        (\"External Alpha\", 2D) = \"white\" {}\r\n        [PerRendererData] _EnableExternalAlpha
        (\"Enable External Alpha\", Float) = 0\r\n        _Hue(\"Hue\", Range(0.0,
        1.0)) = 0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n        _BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        Blend One OneMinusSrcAlpha\r\n\r\n       
        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n        Pass\r\n       
        {\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n           
        #pragma fragment SpriteFrag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_instancing\r\n            #pragma multi_compile_local
        _ PIXELSNAP_ON\r\n            #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        BLENDMODES_GRAB_POSITION(1)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            inline float4 UnityFlipSprite(in float3 pos, in fixed2
        flip)\r\n            {\r\n                return float4(pos.xy * flip, pos.z,
        1.0);\r\n            }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n           
        {\r\n                v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID
        (IN);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n               
        OUT.vertex = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex
        = UnityObjectToClipPos(OUT.vertex);\r\n                OUT.texcoord = IN.texcoord;\r\n               
        OUT.color = IN.color * _Color * _RendererColor;\r\n\r\n                float2
        refcoords = TRANSFORM_TEX(IN.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(c, IN)\r\n                c.rgb = ApplyHsbc(c.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n                c.rgb
        *= c.a;\r\n                \r\n                return c;\r\n            }\r\n           
        ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\r\n            Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex SpriteVert\r\n            #pragma
        fragment SpriteFrag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_instancing\r\n            #pragma multi_compile_local _ PIXELSNAP_ON\r\n           
        #pragma multi_compile _ ETC1_EXTERNAL_ALPHA\r\n            \r\n           
        \r\n\r\n            #include \"../../BlendModesCG.cginc\"\r\n           
        float4 _MainTex_ST;\r\n            \r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                // SpriteRenderer.Color
        while Non-Batched/Instanced.\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n                // this could be smaller
        but that's how bit each entry is regardless of type\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed2,
        unity_SpriteFlipArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #define _Flip           UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteFlipArray)\r\n\r\n           
        #endif // instancing\r\n\r\n            CBUFFER_START(UnityPerDrawSprite)\r\n           
        #ifndef UNITY_INSTANCING_ENABLED\r\n                fixed4 _RendererColor;\r\n               
        fixed2 _Flip;\r\n            #endif\r\n                float _EnableExternalAlpha;\r\n           
        CBUFFER_END\r\n\r\n            // Material Color.\r\n            fixed4 _Color;\r\n           
        fixed _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        inline float4 UnityFlipSprite(in float3 pos, in fixed2 flip)\r\n           
        {\r\n                return float4(pos.xy * flip, pos.z, 1.0);\r\n           
        }\r\n\r\n            v2f SpriteVert(appdata_t IN)\r\n            {\r\n               
        v2f OUT;\r\n\r\n                UNITY_SETUP_INSTANCE_ID (IN);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n\r\n                OUT.vertex
        = UnityFlipSprite(IN.vertex, _Flip);\r\n                OUT.vertex = UnityObjectToClipPos(OUT.vertex);\r\n               
        OUT.texcoord = IN.texcoord;\r\n                OUT.color = IN.color * _Color
        * _RendererColor;\r\n\r\n                float2 refcoords = TRANSFORM_TEX(IN.texcoord,
        _MainTex);\r\n                \r\n\r\n                #ifdef PIXELSNAP_ON\r\n               
        OUT.vertex = UnityPixelSnap (OUT.vertex);\r\n                #endif\r\n\r\n               
        return OUT;\r\n            }\r\n\r\n            sampler2D _MainTex;\r\n           
        sampler2D _AlphaTex;\r\n\r\n            fixed4 SampleSpriteTexture (float2
        uv)\r\n            {\r\n                fixed4 color = tex2D (_MainTex, uv);\r\n\r\n           
        #if ETC1_EXTERNAL_ALPHA\r\n                fixed4 alpha = tex2D (_AlphaTex,
        uv);\r\n                color.a = lerp (color.a, alpha.r, _EnableExternalAlpha);\r\n           
        #endif\r\n\r\n                return color;\r\n            }\r\n\r\n           
        \r\n            fixed4 SpriteFrag(v2f IN) : SV_Target\r\n            {\r\n               
        fixed4 c = SampleSpriteTexture (IN.texcoord) * IN.color;\r\n               
        \r\n                c.rgb = ApplyHsbc(c.rgb, fixed4(_Hue, _Saturation, _Brightness,
        _Contrast));\r\n                c.rgb *= c.a;\r\n                \r\n               
        return c;\r\n            }\r\n            ENDCG\r\n        }\r\n    }\r\n   
        Fallback \"Sprites/Default\"\r\n}\r\n"
  - packagePath: SpritesVectorGradient
    files:
    - filePath: BlendModes-SpritesVectorGradient-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        \r\n    }\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n\t\t\t\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma multi_compile_instancing\r\n            #pragma
        only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                // Gradient settings are stored in 3
        consecutive texels:\r\n                // - texel 0: (float4, 1 byte per
        float)\r\n                //    x = gradient type (0 = tex/linear, 1 = radial)\r\n               
        //    y = address mode (0 = wrap, 1 = clamp, 2 = mirror)\r\n               
        //    z = radialFocus.x\r\n                //    w = radialFocus.y\r\n               
        // - texel 1: (float2, 2 bytes per float) atlas entry position\r\n               
        //    xy = pos.x\r\n                //    zw = pos.y\r\n                //
        - texel 2: (float2, 2 bytes per float) atlas entry size\r\n               
        //    xy = size.x\r\n                //    zw = size.y\r\n\r\n               
        int settingBase = ((int)(i.settingIndex.x + 0.5f)) * 3;\r\n               
        float2 texelSize = _MainTex_TexelSize.xy;\r\n                float2 settingUV
        = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n                float2
        uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex, settingUV);\r\n               
        if (gradSettings.x > 0.0f)\r\n                {\r\n                    //
        Radial texture case\r\n                    float2 focus = (gradSettings.zw
        - float2(0.5f, 0.5f)) * 2.0f; // bring focus in the (-1,1) range                   
        \r\n                    uv = float2(radialAddress(i.uv, focus), 0.0);\r\n               
        }\r\n\r\n                int addressing = gradSettings.y * 255;\r\n               
        uv.x = (addressing == 0) ? fmod(uv.x,1.0f) : uv.x; // Wrap\r\n               
        uv.x = (addressing == 1) ? max(min(uv.x,1.0f), 0.0f) : uv.x; // Clamp\r\n               
        float w = fmod(uv.x,2.0f);\r\n                uv.x = (addressing == 2) ?
        (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; // Mirror\r\n\r\n               
        // Adjust UV to atlas position\r\n                float2 nextUV = float2(texelSize.x,
        0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex, settingUV+nextUV)
        * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n                float2 size
        = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(resultColor.rgb, buffer.rgb)\r\n               
        buffer = resultColor;\r\n                \r\n            }\r\n           
        ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/FramebufferMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n\t\t\tStencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma multi_compile_instancing\r\n            #pragma
        only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                // Gradient settings are stored in 3
        consecutive texels:\r\n                // - texel 0: (float4, 1 byte per
        float)\r\n                //    x = gradient type (0 = tex/linear, 1 = radial)\r\n               
        //    y = address mode (0 = wrap, 1 = clamp, 2 = mirror)\r\n               
        //    z = radialFocus.x\r\n                //    w = radialFocus.y\r\n               
        // - texel 1: (float2, 2 bytes per float) atlas entry position\r\n               
        //    xy = pos.x\r\n                //    zw = pos.y\r\n                //
        - texel 2: (float2, 2 bytes per float) atlas entry size\r\n               
        //    xy = size.x\r\n                //    zw = size.y\r\n\r\n               
        int settingBase = ((int)(i.settingIndex.x + 0.5f)) * 3;\r\n               
        float2 texelSize = _MainTex_TexelSize.xy;\r\n                float2 settingUV
        = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n                float2
        uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex, settingUV);\r\n               
        if (gradSettings.x > 0.0f)\r\n                {\r\n                    //
        Radial texture case\r\n                    float2 focus = (gradSettings.zw
        - float2(0.5f, 0.5f)) * 2.0f; // bring focus in the (-1,1) range                   
        \r\n                    uv = float2(radialAddress(i.uv, focus), 0.0);\r\n               
        }\r\n\r\n                int addressing = gradSettings.y * 255;\r\n               
        uv.x = (addressing == 0) ? fmod(uv.x,1.0f) : uv.x; // Wrap\r\n               
        uv.x = (addressing == 1) ? max(min(uv.x,1.0f), 0.0f) : uv.x; // Clamp\r\n               
        float w = fmod(uv.x,2.0f);\r\n                uv.x = (addressing == 2) ?
        (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; // Mirror\r\n\r\n               
        // Adjust UV to atlas position\r\n                float2 nextUV = float2(texelSize.x,
        0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex, settingUV+nextUV)
        * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n                float2 size
        = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(resultColor.rgb, buffer.rgb)\r\n               
        buffer = resultColor;\r\n                \r\n            }\r\n           
        ENDCG\r\n        }\r\n        Pass\r\n        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        multi_compile_instancing\r\n            \r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        \r\n                \r\n                return resultColor;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/Grab\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        \r\n    }\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n\t\t\t\r\n\r\n            CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_GRAB_POSITION(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                return o;\r\n            }\r\n\r\n           
        float2 unpackFloat2(fixed4 c)\r\n            {\r\n                return
        float2(c.r*255 + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n           
        float2 rayUnitCircleFirstHit(float2 rayStart, float2 rayDir)\r\n           
        {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n   
        }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/GrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_GRAB_POSITION(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                return o;\r\n            }\r\n\r\n           
        float2 unpackFloat2(fixed4 c)\r\n            {\r\n                return
        float2(c.r*255 + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n           
        float2 rayUnitCircleFirstHit(float2 rayStart, float2 rayDir)\r\n           
        {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_GRAB(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        \r\n                \r\n                return resultColor;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n\t\t\t\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma multi_compile_instancing\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.uv,
        o)\r\n                return o;\r\n            }\r\n\r\n            float2
        unpackFloat2(fixed4 c)\r\n            {\r\n                return float2(c.r*255
        + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n            float2 rayUnitCircleFirstHit(float2
        rayStart, float2 rayDir)\r\n            {\r\n                float tca =
        dot(-rayStart, rayDir);\r\n                float d2 = dot(rayStart, rayStart)
        - tca * tca;\r\n                float thc = sqrt(1.0f - d2);\r\n               
        float t0 = tca - thc;\r\n                float t1 = tca + thc;\r\n               
        float t = min(t0, t1);\r\n                if (t < 0.0f)\r\n                   
        t = max(t0, t1);\r\n                return rayStart + rayDir * t;\r\n           
        }\r\n\r\n            float radialAddress(float2 uv, float2 focus)\r\n           
        {\r\n                uv = (uv - float2(0.5f, 0.5f)) * 2.0f;\r\n               
        float2 pointOnPerimeter = rayUnitCircleFirstHit(focus, normalize(uv - focus));\r\n               
        float2 diff = pointOnPerimeter - focus;\r\n                if (abs(diff.x)
        > 0.0001f)\r\n                    return (uv.x - focus.x) / diff.x;\r\n               
        if (abs(diff.y) > 0.0001f)\r\n                    return (uv.y - focus.y)
        / diff.y;\r\n                return 0.0f;\r\n            }\r\n\r\n\t\t\t\r\n           
        fixed4 frag (v2f i) : SV_Target\r\n            {\r\n                // Gradient
        settings are stored in 3 consecutive texels:\r\n                // - texel
        0: (float4, 1 byte per float)\r\n                //    x = gradient type
        (0 = tex/linear, 1 = radial)\r\n                //    y = address mode (0
        = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n   
        }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/OverlayMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"RenderType\" = \"Transparent\"\r\n            \"Queue\"
        = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n\t\t\tStencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n           
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma multi_compile_instancing\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.uv,
        o)\r\n                return o;\r\n            }\r\n\r\n            float2
        unpackFloat2(fixed4 c)\r\n            {\r\n                return float2(c.r*255
        + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n            float2 rayUnitCircleFirstHit(float2
        rayStart, float2 rayDir)\r\n            {\r\n                float tca =
        dot(-rayStart, rayDir);\r\n                float d2 = dot(rayStart, rayStart)
        - tca * tca;\r\n                float thc = sqrt(1.0f - d2);\r\n               
        float t0 = tca - thc;\r\n                float t1 = tca + thc;\r\n               
        float t = min(t0, t1);\r\n                if (t < 0.0f)\r\n                   
        t = max(t0, t1);\r\n                return rayStart + rayDir * t;\r\n           
        }\r\n\r\n            float radialAddress(float2 uv, float2 focus)\r\n           
        {\r\n                uv = (uv - float2(0.5f, 0.5f)) * 2.0f;\r\n               
        float2 pointOnPerimeter = rayUnitCircleFirstHit(focus, normalize(uv - focus));\r\n               
        float2 diff = pointOnPerimeter - focus;\r\n                if (abs(diff.x)
        > 0.0001f)\r\n                    return (uv.x - focus.x) / diff.x;\r\n               
        if (abs(diff.y) > 0.0001f)\r\n                    return (uv.y - focus.y)
        / diff.y;\r\n                return 0.0f;\r\n            }\r\n\r\n\t\t\t\r\n           
        fixed4 frag (v2f i) : SV_Target\r\n            {\r\n                // Gradient
        settings are stored in 3 consecutive texels:\r\n                // - texel
        0: (float4, 1 byte per float)\r\n                //    x = gradient type
        (0 = tex/linear, 1 = radial)\r\n                //    y = address mode (0
        = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_OVERLAY(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        \r\n                \r\n                return resultColor;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/UnifiedGrab\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        \r\n    }\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n\t\t\t\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        multi_compile_instancing\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_GRAB_POSITION(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                return o;\r\n            }\r\n\r\n           
        float2 unpackFloat2(fixed4 c)\r\n            {\r\n                return
        float2(c.r*255 + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n           
        float2 rayUnitCircleFirstHit(float2 rayStart, float2 rayDir)\r\n           
        {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n   
        }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
    - filePath: BlendModes-SpritesVectorGradient-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/SpritesVectorGradient/UnifiedGrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        _MainTex (\"Texture\", 2D) = \"white\" {}\r\n       
        _Color (\"Tint\", Color) = (1,1,1,1)\r\n        [HideInInspector] _RendererColor
        (\"RendererColor\", Color) = (1,1,1,1)\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"RenderType\" = \"Transparent\"\r\n           
        \"Queue\" = \"Transparent\"\r\n            \"IgnoreProjector\" = \"True\"\r\n           
        \"PreviewType\" = \"Plane\"\r\n        }\r\n        LOD 100\r\n\r\n       
        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n        Blend SrcAlpha
        OneMinusSrcAlpha\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n            CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        multi_compile_instancing\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #ifdef UNITY_INSTANCING_ENABLED\r\n            UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n               
        UNITY_DEFINE_INSTANCED_PROP(fixed4, unity_SpriteRendererColorArray)\r\n           
        UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n            #define _RendererColor 
        UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\tBLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        BLENDMODES_GRAB_POSITION(3)\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                return o;\r\n            }\r\n\r\n           
        float2 unpackFloat2(fixed4 c)\r\n            {\r\n                return
        float2(c.r*255 + c.g, c.b*255 + c.a);\r\n            }\r\n\r\n           
        float2 rayUnitCircleFirstHit(float2 rayStart, float2 rayDir)\r\n           
        {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(resultColor, i)\r\n                \r\n               
        return resultColor;\r\n            }\r\n            ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n\t\t\tStencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n            CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma multi_compile_instancing\r\n           
        \r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #ifdef UNITY_INSTANCING_ENABLED\r\n           
        UNITY_INSTANCING_BUFFER_START(PerDrawSprite)\r\n                UNITY_DEFINE_INSTANCED_PROP(fixed4,
        unity_SpriteRendererColorArray)\r\n            UNITY_INSTANCING_BUFFER_END(PerDrawSprite)\r\n           
        #define _RendererColor  UNITY_ACCESS_INSTANCED_PROP(PerDrawSprite, unity_SpriteRendererColorArray)\r\n           
        #endif\r\n\r\n            #ifndef UNITY_INSTANCING_ENABLED\r\n           
        fixed4 _RendererColor;\r\n            #endif\r\n\r\n\t\t\t\r\n\r\n           
        struct appdata\r\n            {\r\n                float4 vertex : POSITION;\r\n               
        fixed4 color : COLOR;\r\n                float2 uv : TEXCOORD0;\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                \r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                fixed4 color : COLOR;\r\n               
        float2 uv : TEXCOORD0; // uv.z is used for setting index\r\n               
        float2 settingIndex : TEXCOORD2;\r\n                float4 vertex : SV_POSITION;\r\n               
        \r\n            };\r\n\r\n            sampler2D _MainTex;\r\n           
        float4 _MainTex_ST;\r\n            float4 _MainTex_TexelSize;\r\n           
        fixed4 _Color;\r\n            \r\n            v2f vert (appdata v)\r\n           
        {\r\n                v2f o;\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        #ifdef UNITY_COLORSPACE_GAMMA\r\n                o.color = v.color;\r\n               
        #else\r\n                o.color = fixed4(GammaToLinearSpace(v.color.rgb),
        v.color.a);\r\n                #endif\r\n                o.color *= _RendererColor
        * _Color;\r\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\r\n               
        o.settingIndex = v.settingIndex;\r\n                \r\n                return
        o;\r\n            }\r\n\r\n            float2 unpackFloat2(fixed4 c)\r\n           
        {\r\n                return float2(c.r*255 + c.g, c.b*255 + c.a);\r\n           
        }\r\n\r\n            float2 rayUnitCircleFirstHit(float2 rayStart, float2
        rayDir)\r\n            {\r\n                float tca = dot(-rayStart, rayDir);\r\n               
        float d2 = dot(rayStart, rayStart) - tca * tca;\r\n                float
        thc = sqrt(1.0f - d2);\r\n                float t0 = tca - thc;\r\n               
        float t1 = tca + thc;\r\n                float t = min(t0, t1);\r\n               
        if (t < 0.0f)\r\n                    t = max(t0, t1);\r\n               
        return rayStart + rayDir * t;\r\n            }\r\n\r\n            float radialAddress(float2
        uv, float2 focus)\r\n            {\r\n                uv = (uv - float2(0.5f,
        0.5f)) * 2.0f;\r\n                float2 pointOnPerimeter = rayUnitCircleFirstHit(focus,
        normalize(uv - focus));\r\n                float2 diff = pointOnPerimeter
        - focus;\r\n                if (abs(diff.x) > 0.0001f)\r\n                   
        return (uv.x - focus.x) / diff.x;\r\n                if (abs(diff.y) > 0.0001f)\r\n                   
        return (uv.y - focus.y) / diff.y;\r\n                return 0.0f;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                // Gradient settings are stored in 3 consecutive texels:\r\n               
        // - texel 0: (float4, 1 byte per float)\r\n                //    x = gradient
        type (0 = tex/linear, 1 = radial)\r\n                //    y = address mode
        (0 = wrap, 1 = clamp, 2 = mirror)\r\n                //    z = radialFocus.x\r\n               
        //    w = radialFocus.y\r\n                // - texel 1: (float2, 2 bytes
        per float) atlas entry position\r\n                //    xy = pos.x\r\n               
        //    zw = pos.y\r\n                // - texel 2: (float2, 2 bytes per float)
        atlas entry size\r\n                //    xy = size.x\r\n               
        //    zw = size.y\r\n\r\n                int settingBase = ((int)(i.settingIndex.x
        + 0.5f)) * 3;\r\n                float2 texelSize = _MainTex_TexelSize.xy;\r\n               
        float2 settingUV = float2(settingBase + 0.5f, 0.5f) * texelSize;\r\n\r\n               
        float2 uv = i.uv;\r\n                fixed4 gradSettings = tex2D(_MainTex,
        settingUV);\r\n                if (gradSettings.x > 0.0f)\r\n               
        {\r\n                    // Radial texture case\r\n                    float2
        focus = (gradSettings.zw - float2(0.5f, 0.5f)) * 2.0f; // bring focus in
        the (-1,1) range                    \r\n                    uv = float2(radialAddress(i.uv,
        focus), 0.0);\r\n                }\r\n\r\n                int addressing
        = gradSettings.y * 255;\r\n                uv.x = (addressing == 0) ? fmod(uv.x,1.0f)
        : uv.x; // Wrap\r\n                uv.x = (addressing == 1) ? max(min(uv.x,1.0f),
        0.0f) : uv.x; // Clamp\r\n                float w = fmod(uv.x,2.0f);\r\n               
        uv.x = (addressing == 2) ? (w > 1.0f ? 1.0f-fmod(w,1.0f) : w) : uv.x; //
        Mirror\r\n\r\n                // Adjust UV to atlas position\r\n               
        float2 nextUV = float2(texelSize.x, 0);\r\n                float2 pos = (unpackFloat2(tex2D(_MainTex,
        settingUV+nextUV) * 255) + float2(0.5f, 0.5f)) * texelSize;\r\n               
        float2 size = unpackFloat2(tex2D(_MainTex, settingUV+nextUV*2) * 255) * texelSize;\r\n               
        uv = uv * size + pos;\r\n\r\n                fixed4 texColor = tex2D(_MainTex,
        uv);\r\n                #ifndef UNITY_COLORSPACE_GAMMA\r\n               
        texColor = fixed4(GammaToLinearSpace(texColor.rgb), texColor.a);\r\n               
        #endif\r\n\r\n                fixed4 resultColor = texColor * i.color;\r\n               
        \r\n                \r\n                return resultColor;\r\n           
        }\r\n            ENDCG\r\n        }\r\n    }\r\n    Fallback \"Sprites/Default\"\r\n}\r\n"
  - packagePath: TMProDistanceField
    files:
    - filePath: BlendModes-TMProDistanceField-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/Framebuffer\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\tStencil\r\n\t{\r\n\t\tRef
        [_Stencil]\r\n\t\tComp [_StencilComp]\r\n\t\tPass [_StencilOp] \r\n\t\tReadMask
        [_StencilReadMask]\r\n\t\tWriteMask [_StencilWriteMask]\r\n\t}\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\t\r\n\r\n\tPass
        {\r\n\r\n\t\t\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma target 3.0\r\n\t\t#pragma
        vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma shader_feature
        __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t#pragma only_renderers framebufferfetch\r\n\r\n\t\t#pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include
        \"UnityCG.cginc\"\r\n\t\t#include \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// Used by Unity
        internally to handle Texture Tiling and Offset.\r\n\t\tfloat4 _FaceTex_ST;\r\n\t\tfloat4
        _OutlineTex_ST;\r\n\t\t\r\n\r\n\t\tpixel_t VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat
        bold = step(input.texcoord1.y, 0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x
        += _VertexOffsetX;\r\n\t\t\tvert.y += _VertexOffsetY;\r\n\r\n\t\t\tfloat4
        vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2 pixelSize = vPosition.w;\r\n\t\t\tpixelSize
        /= float2(_ScaleX, _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat
        scale = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\t\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\r\n\t\tvoid
        PixShader(pixel_t input, inout fixed4 buffer : SV_Target)\r\n        \r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_FRAMEBUFFER(input.color.rgb,
        buffer.rgb)\r\n\t\t\tfloat c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef
        UNDERLAY_ON\r\n\t\t\tclip(c - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t=
        input.param.y;\r\n\t\t\tfloat\tbias\t= input.param.z;\r\n\t\t\tfloat\tweight\t=
        input.param.w;\r\n\t\t\tfloat\tsd = (bias - c) * scale;\r\n\r\n\t\t\tfloat
        outline = (_OutlineWidth * _ScaleRatioA) * scale;\r\n\t\t\tfloat softness
        = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4 faceColor
        = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\tbuffer = faceColor * input.color.a;\r\n           
        \r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
    - filePath: BlendModes-TMProDistanceField-FramebufferMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/FramebufferMasked\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\t\r\n\r\n\tPass
        {\r\n\r\n\t\tStencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma
        fragment PixShader\r\n\t\t#pragma shader_feature __ BEVEL_ON\r\n\t\t#pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma shader_feature
        __ GLOW_ON\r\n\t\t#pragma only_renderers framebufferfetch\r\n\r\n\t\t#pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma
        multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include
        \"UnityCG.cginc\"\r\n\t\t#include \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// Used by Unity
        internally to handle Texture Tiling and Offset.\r\n\t\tfloat4 _FaceTex_ST;\r\n\t\tfloat4
        _OutlineTex_ST;\r\n\t\t\r\n\r\n\t\tpixel_t VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat
        bold = step(input.texcoord1.y, 0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x
        += _VertexOffsetX;\r\n\t\t\tvert.y += _VertexOffsetY;\r\n\r\n\t\t\tfloat4
        vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2 pixelSize = vPosition.w;\r\n\t\t\tpixelSize
        /= float2(_ScaleX, _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat
        scale = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\t\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\r\n\t\tvoid
        PixShader(pixel_t input, inout fixed4 buffer : SV_Target)\r\n        \r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_FRAMEBUFFER(input.color.rgb,
        buffer.rgb)\r\n\t\t\tfloat c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef
        UNDERLAY_ON\r\n\t\t\tclip(c - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t=
        input.param.y;\r\n\t\t\tfloat\tbias\t= input.param.z;\r\n\t\t\tfloat\tweight\t=
        input.param.w;\r\n\t\t\tfloat\tsd = (bias - c) * scale;\r\n\r\n\t\t\tfloat
        outline = (_OutlineWidth * _ScaleRatioA) * scale;\r\n\t\t\tfloat softness
        = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4 faceColor
        = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\tbuffer = faceColor * input.color.a;\r\n           
        \r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n\tPass {\r\n\r\n\t\tStencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma
        target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// Used by Unity
        internally to handle Texture Tiling and Offset.\r\n\t\tfloat4 _FaceTex_ST;\r\n\t\tfloat4
        _OutlineTex_ST;\r\n\t\t\r\n\r\n\t\tpixel_t VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat
        bold = step(input.texcoord1.y, 0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x
        += _VertexOffsetX;\r\n\t\t\tvert.y += _VertexOffsetY;\r\n\r\n\t\t\tfloat4
        vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2 pixelSize = vPosition.w;\r\n\t\t\tpixelSize
        /= float2(_ScaleX, _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat
        scale = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\t\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n       
        fixed4 PixShader(pixel_t input) : SV_Target\r\n\t\t{\r\n\t\t\t\r\n\t\t\tfloat
        c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef UNDERLAY_ON\r\n\t\t\tclip(c
        - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t= input.param.y;\r\n\t\t\tfloat\tbias\t=
        input.param.z;\r\n\t\t\tfloat\tweight\t= input.param.w;\r\n\t\t\tfloat\tsd
        = (bias - c) * scale;\r\n\r\n\t\t\tfloat outline = (_OutlineWidth * _ScaleRatioA)
        * scale;\r\n\t\t\tfloat softness = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4
        faceColor = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
    - filePath: BlendModes-TMProDistanceField-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/Grab\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\tStencil\r\n\t{\r\n\t\tRef
        [_Stencil]\r\n\t\tComp [_StencilComp]\r\n\t\tPass [_StencilOp] \r\n\t\tReadMask
        [_StencilReadMask]\r\n\t\tWriteMask [_StencilWriteMask]\r\n\t}\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\tGrabPass
        { }\r\n\r\n\tPass {\r\n\r\n\t\t\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma target
        3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\tBLENDMODES_GRAB_POSITION(6)\r\n\t\t};\r\n\r\n\t\t//
        Used by Unity internally to handle Texture Tiling and Offset.\r\n\t\tfloat4
        _FaceTex_ST;\r\n\t\tfloat4 _OutlineTex_ST;\r\n\t\tBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n\t\tpixel_t
        VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat bold = step(input.texcoord1.y,
        0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x += _VertexOffsetX;\r\n\t\t\tvert.y
        += _VertexOffsetY;\r\n\r\n\t\t\tfloat4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2
        pixelSize = vPosition.w;\r\n\t\t\tpixelSize /= float2(_ScaleX, _ScaleY) *
        abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat scale
        = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\tComputeGrabScreenPos(vPosition)\r\n\t\t\t};\r\n\r\n\t\t\treturn
        output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_GRAB(input.color, input)\r\n\t\t\tfloat
        c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef UNDERLAY_ON\r\n\t\t\tclip(c
        - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t= input.param.y;\r\n\t\t\tfloat\tbias\t=
        input.param.z;\r\n\t\t\tfloat\tweight\t= input.param.w;\r\n\t\t\tfloat\tsd
        = (bias - c) * scale;\r\n\r\n\t\t\tfloat outline = (_OutlineWidth * _ScaleRatioA)
        * scale;\r\n\t\t\tfloat softness = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4
        faceColor = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
    - filePath: BlendModes-TMProDistanceField-GrabMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/GrabMasked\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\tGrabPass
        { }\r\n\r\n\tPass {\r\n\r\n\t\tStencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_BlendStencilComp] }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma target
        3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\tBLENDMODES_GRAB_POSITION(6)\r\n\t\t};\r\n\r\n\t\t//
        Used by Unity internally to handle Texture Tiling and Offset.\r\n\t\tfloat4
        _FaceTex_ST;\r\n\t\tfloat4 _OutlineTex_ST;\r\n\t\tBLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n\t\tpixel_t
        VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat bold = step(input.texcoord1.y,
        0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x += _VertexOffsetX;\r\n\t\t\tvert.y
        += _VertexOffsetY;\r\n\r\n\t\t\tfloat4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2
        pixelSize = vPosition.w;\r\n\t\t\tpixelSize /= float2(_ScaleX, _ScaleY) *
        abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat scale
        = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\tComputeGrabScreenPos(vPosition)\r\n\t\t\t};\r\n\r\n\t\t\treturn
        output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_GRAB(input.color, input)\r\n\t\t\tfloat
        c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef UNDERLAY_ON\r\n\t\t\tclip(c
        - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t= input.param.y;\r\n\t\t\tfloat\tbias\t=
        input.param.z;\r\n\t\t\tfloat\tweight\t= input.param.w;\r\n\t\t\tfloat\tsd
        = (bias - c) * scale;\r\n\r\n\t\t\tfloat outline = (_OutlineWidth * _ScaleRatioA)
        * scale;\r\n\t\t\tfloat softness = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4
        faceColor = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n\tPass {\r\n\r\n\t\tStencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma
        target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// Used by Unity
        internally to handle Texture Tiling and Offset.\r\n\t\tfloat4 _FaceTex_ST;\r\n\t\tfloat4
        _OutlineTex_ST;\r\n\t\t\r\n\r\n\t\tpixel_t VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat
        bold = step(input.texcoord1.y, 0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x
        += _VertexOffsetX;\r\n\t\t\tvert.y += _VertexOffsetY;\r\n\r\n\t\t\tfloat4
        vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2 pixelSize = vPosition.w;\r\n\t\t\tpixelSize
        /= float2(_ScaleX, _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat
        scale = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\t\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n       
        fixed4 PixShader(pixel_t input) : SV_Target\r\n\t\t{\r\n\t\t\t\r\n\t\t\tfloat
        c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef UNDERLAY_ON\r\n\t\t\tclip(c
        - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t= input.param.y;\r\n\t\t\tfloat\tbias\t=
        input.param.z;\r\n\t\t\tfloat\tweight\t= input.param.w;\r\n\t\t\tfloat\tsd
        = (bias - c) * scale;\r\n\r\n\t\t\tfloat outline = (_OutlineWidth * _ScaleRatioA)
        * scale;\r\n\t\t\tfloat softness = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4
        faceColor = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
    - filePath: BlendModes-TMProDistanceField-UnifiedGrab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/UnifiedGrab\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\tStencil\r\n\t{\r\n\t\tRef
        [_Stencil]\r\n\t\tComp [_StencilComp]\r\n\t\tPass [_StencilOp] \r\n\t\tReadMask
        [_StencilReadMask]\r\n\t\tWriteMask [_StencilWriteMask]\r\n\t}\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\tGrabPass
        { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n\tPass {\r\n\r\n\t\t\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma
        target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\tBLENDMODES_GRAB_POSITION(6)\r\n\t\t};\r\n\r\n\t\t//
        Used by Unity internally to handle Texture Tiling and Offset.\r\n\t\tfloat4
        _FaceTex_ST;\r\n\t\tfloat4 _OutlineTex_ST;\r\n\t\tBLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n\t\tpixel_t
        VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat bold = step(input.texcoord1.y,
        0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x += _VertexOffsetX;\r\n\t\t\tvert.y
        += _VertexOffsetY;\r\n\r\n\t\t\tfloat4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2
        pixelSize = vPosition.w;\r\n\t\t\tpixelSize /= float2(_ScaleX, _ScaleY) *
        abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat scale
        = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\tComputeGrabScreenPos(vPosition)\r\n\t\t\t};\r\n\r\n\t\t\treturn
        output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(input.color,
        input)\r\n\t\t\tfloat c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef
        UNDERLAY_ON\r\n\t\t\tclip(c - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t=
        input.param.y;\r\n\t\t\tfloat\tbias\t= input.param.z;\r\n\t\t\tfloat\tweight\t=
        input.param.w;\r\n\t\t\tfloat\tsd = (bias - c) * scale;\r\n\r\n\t\t\tfloat
        outline = (_OutlineWidth * _ScaleRatioA) * scale;\r\n\t\t\tfloat softness
        = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4 faceColor
        = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
    - filePath: BlendModes-TMProDistanceField-UnifiedGrabMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProDistanceField/UnifiedGrabMasked\"
        {\r\n\r\nProperties {\r\n\t_FaceTex\t\t\t(\"Face Texture\", 2D) = \"white\"
        {}\r\n\t_FaceUVSpeedX\t\t(\"Face UV Speed X\", Range(-5, 5)) = 0.0\r\n\t_FaceUVSpeedY\t\t(\"Face
        UV Speed Y\", Range(-5, 5)) = 0.0\r\n\t_FaceColor\t\t\t(\"Face Color\", Color)
        = (1,1,1,1)\r\n\t_FaceDilate\t\t\t(\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n\t_OutlineColor\t\t(\"Outline
        Color\", Color) = (0,0,0,1)\r\n\t_OutlineTex\t\t\t(\"Outline Texture\", 2D)
        = \"white\" {}\r\n\t_OutlineUVSpeedX\t(\"Outline UV Speed X\", Range(-5,
        5)) = 0.0\r\n\t_OutlineUVSpeedY\t(\"Outline UV Speed Y\", Range(-5, 5)) =
        0.0\r\n\t_OutlineWidth\t\t(\"Outline Thickness\", Range(0, 1)) = 0\r\n\t_OutlineSoftness\t(\"Outline
        Softness\", Range(-1,1)) = 0\r\n\r\n\t_Bevel\t\t\t\t(\"Bevel\", Range(0,1))
        = 0.5\r\n\t_BevelOffset\t\t(\"Bevel Offset\", Range(-0.5,0.5)) = 0\r\n\t_BevelWidth\t\t\t(\"Bevel
        Width\", Range(-.5,0.5)) = 0\r\n\t_BevelClamp\t\t\t(\"Bevel Clamp\", Range(0,1))
        = 0\r\n\t_BevelRoundness\t\t(\"Bevel Roundness\", Range(0,1)) = 0\r\n\r\n\t_LightAngle\t\t\t(\"Light
        Angle\", Range(0.0, 6.2831853)) = 3.1416\r\n\t_SpecularColor\t\t(\"Specular\",
        Color) = (1,1,1,1)\r\n\t_SpecularPower\t\t(\"Specular\", Range(0,4)) = 2.0\r\n\t_Reflectivity\t\t(\"Reflectivity\",
        Range(5.0,15.0)) = 10\r\n\t_Diffuse\t\t\t(\"Diffuse\", Range(0,1)) = 0.5\r\n\t_Ambient\t\t\t(\"Ambient\",
        Range(1,0)) = 0.5\r\n\r\n\t_BumpMap \t\t\t(\"Normal map\", 2D) = \"bump\"
        {}\r\n\t_BumpOutline\t\t(\"Bump Outline\", Range(0,1)) = 0\r\n\t_BumpFace\t\t\t(\"Bump
        Face\", Range(0,1)) = 0\r\n\r\n\t_ReflectFaceColor\t(\"Reflection Color\",
        Color) = (0,0,0,1)\r\n\t_ReflectOutlineColor(\"Reflection Color\", Color)
        = (0,0,0,1)\r\n\t_Cube \t\t\t\t(\"Reflection Cubemap\", Cube) = \"black\"
        { /* TexGen CubeReflect */ }\r\n\t_EnvMatrixRotation\t(\"Texture Rotation\",
        vector) = (0, 0, 0, 0)\r\n\t\t\r\n\r\n\t_UnderlayColor\t\t(\"Border Color\",
        Color) = (0,0,0, 0.5)\r\n\t_UnderlayOffsetX\t(\"Border OffsetX\", Range(-1,1))
        = 0\r\n\t_UnderlayOffsetY\t(\"Border OffsetY\", Range(-1,1)) = 0\r\n\t_UnderlayDilate\t\t(\"Border
        Dilate\", Range(-1,1)) = 0\r\n\t_UnderlaySoftness\t(\"Border Softness\",
        Range(0,1)) = 0\r\n\r\n\t_GlowColor\t\t\t(\"Color\", Color) = (0, 1, 0, 0.5)\r\n\t_GlowOffset\t\t\t(\"Offset\",
        Range(-1,1)) = 0\r\n\t_GlowInner\t\t\t(\"Inner\", Range(0,1)) = 0.05\r\n\t_GlowOuter\t\t\t(\"Outer\",
        Range(0,1)) = 0.05\r\n\t_GlowPower\t\t\t(\"Falloff\", Range(1, 0)) = 0.75\r\n\r\n\t_WeightNormal\t\t(\"Weight
        Normal\", float) = 0\r\n\t_WeightBold\t\t\t(\"Weight Bold\", float) = 0.5\r\n\r\n\t_ShaderFlags\t\t(\"Flags\",
        float) = 0\r\n\t_ScaleRatioA\t\t(\"Scale RatioA\", float) = 1\r\n\t_ScaleRatioB\t\t(\"Scale
        RatioB\", float) = 1\r\n\t_ScaleRatioC\t\t(\"Scale RatioC\", float) = 1\r\n\r\n\t_MainTex\t\t\t(\"Font
        Atlas\", 2D) = \"white\" {}\r\n\t_TextureWidth\t\t(\"Texture Width\", float)
        = 512\r\n\t_TextureHeight\t\t(\"Texture Height\", float) = 512\r\n\t_GradientScale\t\t(\"Gradient
        Scale\", float) = 5.0\r\n\t_ScaleX\t\t\t\t(\"Scale X\", float) = 1.0\r\n\t_ScaleY\t\t\t\t(\"Scale
        Y\", float) = 1.0\r\n\t_PerspectiveFilter\t(\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n\t_VertexOffsetX\t\t(\"Vertex OffsetX\", float) = 0\r\n\t_VertexOffsetY\t\t(\"Vertex
        OffsetY\", float) = 0\r\n\t\r\n\t_MaskCoord\t\t\t(\"Mask Coordinates\", vector)
        = (0, 0, 32767, 32767)\r\n\t_ClipRect\t\t\t(\"Clip Rect\", vector) = (-32767,
        -32767, 32767, 32767)\r\n\t_MaskSoftnessX\t\t(\"Mask SoftnessX\", float)
        = 0\r\n\t_MaskSoftnessY\t\t(\"Mask SoftnessY\", float) = 0\r\n\r\n\t_StencilComp\t\t(\"Stencil
        Comparison\", Float) = 8\r\n\t_Stencil\t\t\t(\"Stencil ID\", Float) = 0\r\n\t_StencilOp\t\t\t(\"Stencil
        Operation\", Float) = 0\r\n\t_StencilWriteMask\t(\"Stencil Write Mask\",
        Float) = 255\r\n\t_StencilReadMask\t(\"Stencil Read Mask\", Float) = 255\r\n\r\n\t_ColorMask\t\t\t(\"Color
        Mask\", Float) = 15\r\n\r\n\t_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n}\r\n\r\nSubShader {\r\n\r\n\tTags\r\n\t{\r\n\t\t\"Queue\"=\"Transparent\"\r\n\t\t\"IgnoreProjector\"=\"True\"\r\n\t\t\"RenderType\"=\"Transparent\"\r\n\t}\r\n\r\n\r\n\tCull
        [_CullMode]\r\n\tZWrite Off\r\n\tLighting Off\r\n\tFog { Mode Off }\r\n\tZTest
        [unity_GUIZTestMode]\r\n\tBlend One OneMinusSrcAlpha\r\n\tColorMask [_ColorMask]\r\n\r\n\tGrabPass
        { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n\tPass {\r\n\r\n\t\tStencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma
        target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t#pragma multi_compile_local BLENDMODES_MODE_DARKEN
        BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN
        BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN
        BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR
        BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT
        BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT
        BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION
        BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION
        BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\tBLENDMODES_GRAB_POSITION(6)\r\n\t\t};\r\n\r\n\t\t//
        Used by Unity internally to handle Texture Tiling and Offset.\r\n\t\tfloat4
        _FaceTex_ST;\r\n\t\tfloat4 _OutlineTex_ST;\r\n\t\tBLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n\t\tpixel_t
        VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat bold = step(input.texcoord1.y,
        0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x += _VertexOffsetX;\r\n\t\t\tvert.y
        += _VertexOffsetY;\r\n\r\n\t\t\tfloat4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2
        pixelSize = vPosition.w;\r\n\t\t\tpixelSize /= float2(_ScaleX, _ScaleY) *
        abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat scale
        = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\tComputeGrabScreenPos(vPosition)\r\n\t\t\t};\r\n\r\n\t\t\treturn
        output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n\t\t{\r\n\t\t\tBLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(input.color,
        input)\r\n\t\t\tfloat c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef
        UNDERLAY_ON\r\n\t\t\tclip(c - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t=
        input.param.y;\r\n\t\t\tfloat\tbias\t= input.param.z;\r\n\t\t\tfloat\tweight\t=
        input.param.w;\r\n\t\t\tfloat\tsd = (bias - c) * scale;\r\n\r\n\t\t\tfloat
        outline = (_OutlineWidth * _ScaleRatioA) * scale;\r\n\t\t\tfloat softness
        = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4 faceColor
        = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n\tPass {\r\n\r\n\t\tStencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n\t\tCGPROGRAM\r\n\t\t#pragma
        target 3.0\r\n\t\t#pragma vertex VertShader\r\n\t\t#pragma fragment PixShader\r\n\t\t#pragma
        shader_feature __ BEVEL_ON\r\n\t\t#pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n\t\t#pragma
        shader_feature __ GLOW_ON\r\n\t\t\r\n\r\n\t\t#pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n\t\t#pragma
        multi_compile __ UNITY_UI_ALPHACLIP\r\n\t\t\r\n\r\n\t\t#include \"UnityCG.cginc\"\r\n\t\t#include
        \"UnityUI.cginc\"\r\n\t\t// #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\t\t//#include \"TMPro.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\nfloat2 UnpackUV(float uv)\r\n{ \r\n\tfloat2 output;\r\n\toutput.x
        = floor(uv / 4096);\r\n\toutput.y = uv - 4096 * output.x;\r\n\r\n\treturn
        output * 0.001953125;\r\n}\r\n\r\nfixed4 GetColor(half d, fixed4 faceColor,
        fixed4 outlineColor, half outline, half softness)\r\n{\r\n\thalf faceAlpha
        = 1-saturate((d - outline * 0.5 + softness * 0.5) / (1.0 + softness));\r\n\thalf
        outlineAlpha = saturate((d + outline * 0.5)) * sqrt(min(1.0, outline));\r\n\r\n\tfaceColor.rgb
        *= faceColor.a;\r\n\toutlineColor.rgb *= outlineColor.a;\r\n\r\n\tfaceColor
        = lerp(faceColor, outlineColor, outlineAlpha);\r\n\r\n\tfaceColor *= faceAlpha;\r\n\r\n\treturn
        faceColor;\r\n}\r\n\r\nfloat3 GetSurfaceNormal(float4 h, float bias)\r\n{\r\n\tbool
        raisedBevel = step(1, fmod(_ShaderFlags, 2));\r\n\r\n\th += bias+_BevelOffset;\r\n\r\n\tfloat
        bevelWidth = max(.01, _OutlineWidth+_BevelWidth);\r\n\r\n  // Track outline\r\n\th
        -= .5;\r\n\th /= bevelWidth;\r\n\th = saturate(h+.5);\r\n\r\n\tif(raisedBevel)
        h = 1 - abs(h*2.0 - 1.0);\r\n\th = lerp(h, sin(h*3.141592/2.0), _BevelRoundness);\r\n\th
        = min(h, 1.0-_BevelClamp);\r\n\th *= _Bevel * bevelWidth * _GradientScale
        * -2.0;\r\n\r\n\tfloat3 va = normalize(float3(1.0, 0.0, h.y - h.x));\r\n\tfloat3
        vb = normalize(float3(0.0, -1.0, h.w - h.z));\r\n\r\n\treturn cross(va, vb);\r\n}\r\n\r\nfloat3
        GetSurfaceNormal(float2 uv, float bias, float3 delta)\r\n{\r\n\t// Read \"height
        field\"\r\n  float4 h = {tex2D(_MainTex, uv - delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.xz).a,\r\n\t\t\t\ttex2D(_MainTex, uv - delta.zy).a,\r\n\t\t\t\ttex2D(_MainTex,
        uv + delta.zy).a};\r\n\r\n\treturn GetSurfaceNormal(h, bias);\r\n}\r\n\r\nfloat3
        GetSpecular(float3 n, float3 l)\r\n{\r\n\tfloat spec = pow(max(0.0, dot(n,
        l)), _Reflectivity);\r\n\treturn _SpecularColor.rgb * spec * _SpecularPower;\r\n}\r\n\r\nfloat4
        GetGlowColor(float d, float scale)\r\n{\r\n\tfloat glow = d - (_GlowOffset*_ScaleRatioB)
        * 0.5 * scale;\r\n\tfloat t = lerp(_GlowInner, (_GlowOuter * _ScaleRatioB),
        step(0.0, glow)) * 0.5 * scale;\r\n\tglow = saturate(abs(glow/(1.0 + t)));\r\n\tglow
        = 1.0-pow(glow, _GlowPower);\r\n\tglow *= sqrt(min(1.0, t)); // Fade off
        glow thinner than 1 screen pixel\r\n\treturn float4(_GlowColor.rgb, saturate(_GlowColor.a
        * glow * 2));\r\n}\r\n\r\nfloat4 BlendARGB(float4 overlying, float4 underlying)\r\n{\r\n\toverlying.rgb
        *= overlying.a;\r\n\tunderlying.rgb *= underlying.a;\r\n\tfloat3 blended
        = overlying.rgb + ((1-overlying.a)*underlying.rgb);\r\n\tfloat alpha = underlying.a
        + (1-underlying.a)*overlying.a;\r\n\treturn float4(blended, alpha);\r\n}\r\n////////////////////////////////////////////////////////
        TMPro.cginc\r\n\r\n\t\t#include \"../../BlendModesCG.cginc\"\r\n\r\n\t\tstruct
        vertex_t {\r\n\t\t\tfloat4\tposition\t\t: POSITION;\r\n\t\t\tfloat3\tnormal\t\t\t:
        NORMAL;\r\n\t\t\tfixed4\tcolor\t\t\t: COLOR;\r\n\t\t\tfloat2\ttexcoord0\t\t:
        TEXCOORD0;\r\n\t\t\tfloat2\ttexcoord1\t\t: TEXCOORD1;\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\tstruct
        pixel_t {\r\n\t\t\tfloat4\tposition\t\t: SV_POSITION;\r\n\t\t\tfixed4\tcolor\t\t\t:
        COLOR;\r\n\t\t\tfloat2\tatlas\t\t\t: TEXCOORD0;\t\t// Atlas\r\n\t\t\tfloat4\tparam\t\t\t:
        TEXCOORD1;\t\t// alphaClip, scale, bias, weight\r\n\t\t\tfloat4\tmask\t\t\t:
        TEXCOORD2;\t\t// Position in object space(xy), pixel Size(zw)\r\n\t\t\tfloat3\tviewDir\t\t\t:
        TEXCOORD3;\r\n\t\t\t\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4\ttexcoord2\t\t:
        TEXCOORD4;\t\t// u,v, scale, bias\r\n\t\t\tfixed4\tunderlayColor\t: COLOR1;\r\n\t\t#endif\r\n\t\t\tfloat4
        textures\t\t\t: TEXCOORD5;\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// Used by Unity
        internally to handle Texture Tiling and Offset.\r\n\t\tfloat4 _FaceTex_ST;\r\n\t\tfloat4
        _OutlineTex_ST;\r\n\t\t\r\n\r\n\t\tpixel_t VertShader(vertex_t input)\r\n\t\t{\r\n\t\t\tfloat
        bold = step(input.texcoord1.y, 0);\r\n\r\n\t\t\tfloat4 vert = input.position;\r\n\t\t\tvert.x
        += _VertexOffsetX;\r\n\t\t\tvert.y += _VertexOffsetY;\r\n\r\n\t\t\tfloat4
        vPosition = UnityObjectToClipPos(vert);\r\n\r\n\t\t\tfloat2 pixelSize = vPosition.w;\r\n\t\t\tpixelSize
        /= float2(_ScaleX, _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n\t\t\tfloat
        scale = rsqrt(dot(pixelSize, pixelSize));\r\n\t\t\tscale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n\t\t\tif (UNITY_MATRIX_P[3][3] == 0) scale = lerp(abs(scale)
        * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n\t\t\tfloat weight = lerp(_WeightNormal,
        _WeightBold, bold) / 4.0;\r\n\t\t\tweight = (weight + _FaceDilate) * _ScaleRatioA
        * 0.5;\r\n\r\n\t\t\tfloat bias =(.5 - weight) + (.5 / scale);\r\n\r\n\t\t\tfloat
        alphaClip = (1.0 - _OutlineWidth*_ScaleRatioA - _OutlineSoftness*_ScaleRatioA);\r\n\t\t\r\n\t\t#if
        GLOW_ON\r\n\t\t\talphaClip = min(alphaClip, 1.0 - _GlowOffset * _ScaleRatioB
        - _GlowOuter * _ScaleRatioB);\r\n\t\t#endif\r\n\r\n\t\t\talphaClip = alphaClip
        / 2.0 - ( .5 / scale) - weight;\r\n\r\n\t\t#if (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\tfloat4
        underlayColor = _UnderlayColor;\r\n\t\t\tunderlayColor.rgb *= underlayColor.a;\r\n\r\n\t\t\tfloat
        bScale = scale;\r\n\t\t\tbScale /= 1 + ((_UnderlaySoftness*_ScaleRatioC)
        * bScale);\r\n\t\t\tfloat bBias = (0.5 - weight) * bScale - 0.5 - ((_UnderlayDilate
        * _ScaleRatioC) * 0.5 * bScale);\r\n\r\n\t\t\tfloat x = -(_UnderlayOffsetX
        * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n\t\t\tfloat y = -(_UnderlayOffsetY
        * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n\t\t\tfloat2 bOffset
        = float2(x, y);\r\n\t\t#endif\r\n\r\n\t\t\t// Generate UV for the Masking
        Texture\r\n\t\t\tfloat4 clampedRect = clamp(_ClipRect, -2e10, 2e10);\r\n\t\t\tfloat2
        maskUV = (vert.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);\r\n\r\n\t\t\t//
        Support for texture tiling and offset\r\n\t\t\tfloat2 textureUV = UnpackUV(input.texcoord1.x);\r\n\t\t\tfloat2
        faceUV = TRANSFORM_TEX(textureUV, _FaceTex);\r\n\t\t\tfloat2 outlineUV =
        TRANSFORM_TEX(textureUV, _OutlineTex);\r\n\r\n\t\t\tpixel_t output = {\r\n\t\t\t\tvPosition,\r\n\t\t\t\tinput.color,\r\n\t\t\t\tinput.texcoord0,\r\n\t\t\t\tfloat4(alphaClip,
        scale, bias, weight),\r\n\t\t\t\thalf4(vert.xy * 2 - clampedRect.xy - clampedRect.zw,
        0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY) + pixelSize.xy)),\r\n\t\t\t\tmul((float3x3)_EnvMatrix,
        _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, vert).xyz),\r\n\t\t\t#if
        (UNDERLAY_ON || UNDERLAY_INNER)\r\n\t\t\t\tfloat4(input.texcoord0 + bOffset,
        bScale, bBias),\r\n\t\t\t\tunderlayColor,\r\n\t\t\t#endif\r\n\t\t\t\tfloat4(faceUV,
        outlineUV),\r\n\t\t\t\t\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\r\n\t\t\r\n       
        fixed4 PixShader(pixel_t input) : SV_Target\r\n\t\t{\r\n\t\t\t\r\n\t\t\tfloat
        c = tex2D(_MainTex, input.atlas).a;\r\n\t\t\r\n\t\t#ifndef UNDERLAY_ON\r\n\t\t\tclip(c
        - input.param.x);\r\n\t\t#endif\r\n\r\n\t\t\tfloat\tscale\t= input.param.y;\r\n\t\t\tfloat\tbias\t=
        input.param.z;\r\n\t\t\tfloat\tweight\t= input.param.w;\r\n\t\t\tfloat\tsd
        = (bias - c) * scale;\r\n\r\n\t\t\tfloat outline = (_OutlineWidth * _ScaleRatioA)
        * scale;\r\n\t\t\tfloat softness = (_OutlineSoftness * _ScaleRatioA) * scale;\r\n\r\n\t\t\thalf4
        faceColor = _FaceColor;\r\n\t\t\thalf4 outlineColor = _OutlineColor;\r\n\r\n\t\t\tfaceColor.rgb
        *= input.color.rgb;\r\n\t\t\t\r\n\t\t\tfaceColor *= tex2D(_FaceTex, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y);\r\n\t\t\toutlineColor
        *= tex2D(_OutlineTex, input.textures.zw + float2(_OutlineUVSpeedX, _OutlineUVSpeedY)
        * _Time.y);\r\n\r\n\t\t\tfaceColor = GetColor(sd, faceColor, outlineColor,
        outline, softness);\r\n\r\n\t\t#if BEVEL_ON\r\n\t\t\tfloat3 dxy = float3(0.5
        / _TextureWidth, 0.5 / _TextureHeight, 0);\r\n\t\t\tfloat3 n = GetSurfaceNormal(input.atlas,
        weight, dxy);\r\n\r\n\t\t\tfloat3 bump = UnpackNormal(tex2D(_BumpMap, input.textures.xy
        + float2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.y)).xyz;\r\n\t\t\tbump *=
        lerp(_BumpFace, _BumpOutline, saturate(sd + outline * 0.5));\r\n\t\t\tn =
        normalize(n- bump);\r\n\r\n\t\t\tfloat3 light = normalize(float3(sin(_LightAngle),
        cos(_LightAngle), -1.0));\r\n\r\n\t\t\tfloat3 col = GetSpecular(n, light);\r\n\t\t\tfaceColor.rgb
        += col*faceColor.a;\r\n\t\t\tfaceColor.rgb *= 1-(dot(n, light)*_Diffuse);\r\n\t\t\tfaceColor.rgb
        *= lerp(_Ambient, 1, n.z*n.z);\r\n\r\n\t\t\tfixed4 reflcol = texCUBE(_Cube,
        reflect(input.viewDir, -n));\r\n\t\t\tfaceColor.rgb += reflcol.rgb * lerp(_ReflectFaceColor.rgb,
        _ReflectOutlineColor.rgb, saturate(sd + outline * 0.5)) * faceColor.a;\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_ON\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a * input.texcoord2.z;\r\n\t\t\tfaceColor
        += input.underlayColor * saturate(d - input.texcoord2.w) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        UNDERLAY_INNER\r\n\t\t\tfloat d = tex2D(_MainTex, input.texcoord2.xy).a *
        input.texcoord2.z;\r\n\t\t\tfaceColor += input.underlayColor * (1 - saturate(d
        - input.texcoord2.w)) * saturate(1 - sd) * (1 - faceColor.a);\r\n\t\t#endif\r\n\r\n\t\t#if
        GLOW_ON\r\n\t\t\tfloat4 glowColor = GetGlowColor(sd, scale);\r\n\t\t\tfaceColor.rgb
        += glowColor.rgb * glowColor.a;\r\n\t\t#endif\r\n\r\n\t\t// Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n\t\t#if UNITY_UI_CLIP_RECT\r\n\t\t\thalf2
        m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n\t\t\tfaceColor
        *= m.x * m.y;\r\n\t\t#endif\r\n\r\n\t\t#if UNITY_UI_ALPHACLIP\r\n\t\t\tclip(faceColor.a
        - 0.001);\r\n\t\t#endif\r\n\r\n  \t\t\t\r\n            return faceColor *
        input.color.a;\r\n\t\t}\r\n\r\n\t\tENDCG\r\n\t}\r\n}\r\n\r\nFallback \"TextMeshPro/Mobile/Distance
        Field\"\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\n}\r\n"
  - packagePath: TMProMobileDistanceField
    files:
    - filePath: BlendModes-TMProMobileDistanceField-Framebuffer.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/Framebuffer\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    \r\n}\r\n\r\nSubShader {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n       
        \"IgnoreProjector\"=\"True\"\r\n        \"RenderType\"=\"Transparent\"\r\n   
        }\r\n\r\n    Stencil\r\n    {\r\n        Ref [_Stencil]\r\n        Comp [_StencilComp]\r\n       
        Pass [_StencilOp] \r\n        ReadMask [_StencilReadMask]\r\n        WriteMask
        [_StencilWriteMask]\r\n    }\r\n\r\n    Cull [_CullMode]\r\n    ZWrite Off\r\n   
        Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    \r\n\r\n   
        Pass {\r\n\r\n        \r\n\r\n        CGPROGRAM\r\n        #pragma vertex
        VertShader\r\n        #pragma fragment PixShader\r\n        #pragma shader_feature
        __ OUTLINE_ON\r\n        #pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n       
        #pragma only_renderers framebufferfetch\r\n\r\n        #pragma multi_compile
        __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        void PixShader(pixel_t input, inout fixed4
        buffer : SV_Target)\r\n        \r\n        {\r\n            BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(input.faceColor.rgb,
        buffer.rgb)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a
        * input.param.x;\r\n            half4 c = input.faceColor * saturate(d -
        input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            buffer = c;\r\n           
        \r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-TMProMobileDistanceField-FramebufferMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/FramebufferMasked\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    _BLENDMODES_StencilId (\"Stencil ID\", Float) = 0\r\n       
        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\", Float) = 0\r\n       
        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader
        {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n        \"IgnoreProjector\"=\"True\"\r\n       
        \"RenderType\"=\"Transparent\"\r\n    }\r\n\r\n\r\n    Cull [_CullMode]\r\n   
        ZWrite Off\r\n    Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    \r\n\r\n   
        Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n        #pragma vertex VertShader\r\n       
        #pragma fragment PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n       
        #pragma shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        #pragma only_renderers
        framebufferfetch\r\n\r\n        #pragma multi_compile __ UNITY_UI_CLIP_RECT\r\n       
        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n        #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n       
        #include \"UnityCG.cginc\"\r\n        #include \"UnityUI.cginc\"\r\n       
        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        void PixShader(pixel_t input, inout fixed4
        buffer : SV_Target)\r\n        \r\n        {\r\n            BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(input.faceColor.rgb,
        buffer.rgb)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a
        * input.param.x;\r\n            half4 c = input.faceColor * saturate(d -
        input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            buffer = c;\r\n           
        \r\n        }\r\n        ENDCG\r\n    }\r\n    Pass {\r\n\r\n        Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n        #pragma vertex VertShader\r\n        #pragma fragment
        PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        \r\n\r\n        #include \"UnityCG.cginc\"\r\n        #include \"UnityUI.cginc\"\r\n       
        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            \r\n            half d = tex2D(_MainTex,
        input.texcoord0.xy).a * input.param.x;\r\n            half4 c = input.faceColor
        * saturate(d - input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-TMProMobileDistanceField-Grab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/Grab\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    \r\n}\r\n\r\nSubShader {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n       
        \"IgnoreProjector\"=\"True\"\r\n        \"RenderType\"=\"Transparent\"\r\n   
        }\r\n\r\n    Stencil\r\n    {\r\n        Ref [_Stencil]\r\n        Comp [_StencilComp]\r\n       
        Pass [_StencilOp] \r\n        ReadMask [_StencilReadMask]\r\n        WriteMask
        [_StencilWriteMask]\r\n    }\r\n\r\n    Cull [_CullMode]\r\n    ZWrite Off\r\n   
        Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    GrabPass
        { }\r\n\r\n    Pass {\r\n\r\n        \r\n\r\n        CGPROGRAM\r\n       
        #pragma vertex VertShader\r\n        #pragma fragment PixShader\r\n       
        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma shader_feature __
        UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma multi_compile
        __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        BLENDMODES_GRAB_POSITION(5)\r\n        };\r\n\r\n        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n       
        pixel_t VertShader(vertex_t input)\r\n        {\r\n            float bold
        = step(input.texcoord1.y, 0);\r\n\r\n            float4 vert = input.vertex;\r\n           
        vert.x += _VertexOffsetX;\r\n            vert.y += _VertexOffsetY;\r\n           
        float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n            float2
        pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX, _ScaleY)
        * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n            \r\n           
        float scale = rsqrt(dot(pixelSize, pixelSize));\r\n            scale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3] == 0) scale
        = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                ComputeGrabScreenPos(vPosition)\r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            BLENDMODES_BLEND_PIXEL_GRAB(input.faceColor,
        input)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a * input.param.x;\r\n           
        half4 c = input.faceColor * saturate(d - input.param.w);\r\n            \r\n       
        #ifdef OUTLINE_ON\r\n            c = lerp(input.outlineColor, input.faceColor,
        saturate(d - input.param.z));\r\n            c *= saturate(d - input.param.y);\r\n       
        #endif\r\n\r\n        #if UNDERLAY_ON\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y)
        * (1 - c.a);\r\n        #endif\r\n\r\n        #if UNDERLAY_INNER\r\n           
        half sd = saturate(d - input.param.z);\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y))
        * sd * (1 - c.a);\r\n        #endif\r\n\r\n        // Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n        #if UNITY_UI_CLIP_RECT\r\n           
        half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n           
        c *= m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-TMProMobileDistanceField-GrabMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/GrabMasked\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    _BLENDMODES_StencilId (\"Stencil ID\", Float) = 0\r\n       
        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\", Float) = 0\r\n       
        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader
        {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n        \"IgnoreProjector\"=\"True\"\r\n       
        \"RenderType\"=\"Transparent\"\r\n    }\r\n\r\n\r\n    Cull [_CullMode]\r\n   
        ZWrite Off\r\n    Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    GrabPass
        { }\r\n\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n       
        #pragma vertex VertShader\r\n        #pragma fragment PixShader\r\n       
        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma shader_feature __
        UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma multi_compile
        __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        BLENDMODES_GRAB_POSITION(5)\r\n        };\r\n\r\n        BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n       
        pixel_t VertShader(vertex_t input)\r\n        {\r\n            float bold
        = step(input.texcoord1.y, 0);\r\n\r\n            float4 vert = input.vertex;\r\n           
        vert.x += _VertexOffsetX;\r\n            vert.y += _VertexOffsetY;\r\n           
        float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n            float2
        pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX, _ScaleY)
        * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n            \r\n           
        float scale = rsqrt(dot(pixelSize, pixelSize));\r\n            scale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3] == 0) scale
        = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                ComputeGrabScreenPos(vPosition)\r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            BLENDMODES_BLEND_PIXEL_GRAB(input.faceColor,
        input)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a * input.param.x;\r\n           
        half4 c = input.faceColor * saturate(d - input.param.w);\r\n            \r\n       
        #ifdef OUTLINE_ON\r\n            c = lerp(input.outlineColor, input.faceColor,
        saturate(d - input.param.z));\r\n            c *= saturate(d - input.param.y);\r\n       
        #endif\r\n\r\n        #if UNDERLAY_ON\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y)
        * (1 - c.a);\r\n        #endif\r\n\r\n        #if UNDERLAY_INNER\r\n           
        half sd = saturate(d - input.param.z);\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y))
        * sd * (1 - c.a);\r\n        #endif\r\n\r\n        // Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n        #if UNITY_UI_CLIP_RECT\r\n           
        half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n           
        c *= m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n    Pass {\r\n\r\n        Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n        #pragma vertex VertShader\r\n        #pragma fragment
        PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        \r\n\r\n        #include \"UnityCG.cginc\"\r\n        #include \"UnityUI.cginc\"\r\n       
        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            \r\n            half d = tex2D(_MainTex,
        input.texcoord0.xy).a * input.param.x;\r\n            half4 c = input.faceColor
        * saturate(d - input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-TMProMobileDistanceField-UnifiedGrab.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/UnifiedGrab\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    \r\n}\r\n\r\nSubShader {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n       
        \"IgnoreProjector\"=\"True\"\r\n        \"RenderType\"=\"Transparent\"\r\n   
        }\r\n\r\n    Stencil\r\n    {\r\n        Ref [_Stencil]\r\n        Comp [_StencilComp]\r\n       
        Pass [_StencilOp] \r\n        ReadMask [_StencilReadMask]\r\n        WriteMask
        [_StencilWriteMask]\r\n    }\r\n\r\n    Cull [_CullMode]\r\n    ZWrite Off\r\n   
        Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    GrabPass
        { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n    Pass {\r\n\r\n        \r\n\r\n       
        CGPROGRAM\r\n        #pragma vertex VertShader\r\n        #pragma fragment
        PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        BLENDMODES_GRAB_POSITION(5)\r\n        };\r\n\r\n        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n       
        pixel_t VertShader(vertex_t input)\r\n        {\r\n            float bold
        = step(input.texcoord1.y, 0);\r\n\r\n            float4 vert = input.vertex;\r\n           
        vert.x += _VertexOffsetX;\r\n            vert.y += _VertexOffsetY;\r\n           
        float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n            float2
        pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX, _ScaleY)
        * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n            \r\n           
        float scale = rsqrt(dot(pixelSize, pixelSize));\r\n            scale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3] == 0) scale
        = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                ComputeGrabScreenPos(vPosition)\r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(input.faceColor,
        input)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a * input.param.x;\r\n           
        half4 c = input.faceColor * saturate(d - input.param.w);\r\n            \r\n       
        #ifdef OUTLINE_ON\r\n            c = lerp(input.outlineColor, input.faceColor,
        saturate(d - input.param.z));\r\n            c *= saturate(d - input.param.y);\r\n       
        #endif\r\n\r\n        #if UNDERLAY_ON\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y)
        * (1 - c.a);\r\n        #endif\r\n\r\n        #if UNDERLAY_INNER\r\n           
        half sd = saturate(d - input.param.z);\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y))
        * sd * (1 - c.a);\r\n        #endif\r\n\r\n        // Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n        #if UNITY_UI_CLIP_RECT\r\n           
        half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n           
        c *= m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
    - filePath: BlendModes-TMProMobileDistanceField-UnifiedGrabMasked.shader
      fileContent: "\r\n\r\nShader \"Hidden/BlendModes/TMProMobileDistanceField/UnifiedGrabMasked\"
        {\r\n\r\nProperties {\r\n    _FaceColor          (\"Face Color\", Color)
        = (1,1,1,1)\r\n    _FaceDilate         (\"Face Dilate\", Range(-1,1)) = 0\r\n\r\n   
        _OutlineColor       (\"Outline Color\", Color) = (0,0,0,1)\r\n    _OutlineWidth      
        (\"Outline Thickness\", Range(0,1)) = 0\r\n    _OutlineSoftness    (\"Outline
        Softness\", Range(0,1)) = 0\r\n\r\n    _UnderlayColor      (\"Border Color\",
        Color) = (0,0,0,.5)\r\n    _UnderlayOffsetX    (\"Border OffsetX\", Range(-1,1))
        = 0\r\n    _UnderlayOffsetY    (\"Border OffsetY\", Range(-1,1)) = 0\r\n   
        _UnderlayDilate     (\"Border Dilate\", Range(-1,1)) = 0\r\n    _UnderlaySoftness  
        (\"Border Softness\", Range(0,1)) = 0\r\n\r\n    _WeightNormal       (\"Weight
        Normal\", float) = 0\r\n    _WeightBold         (\"Weight Bold\", float)
        = .5\r\n\r\n    _ShaderFlags        (\"Flags\", float) = 0\r\n    _ScaleRatioA       
        (\"Scale RatioA\", float) = 1\r\n    _ScaleRatioB        (\"Scale RatioB\",
        float) = 1\r\n    _ScaleRatioC        (\"Scale RatioC\", float) = 1\r\n\r\n   
        _MainTex            (\"Font Atlas\", 2D) = \"white\" {}\r\n    _TextureWidth      
        (\"Texture Width\", float) = 512\r\n    _TextureHeight      (\"Texture Height\",
        float) = 512\r\n    _GradientScale      (\"Gradient Scale\", float) = 5\r\n   
        _ScaleX             (\"Scale X\", float) = 1\r\n    _ScaleY             (\"Scale
        Y\", float) = 1\r\n    _PerspectiveFilter  (\"Perspective Correction\", Range(0,
        1)) = 0.875\r\n\r\n    _VertexOffsetX      (\"Vertex OffsetX\", float) =
        0\r\n    _VertexOffsetY      (\"Vertex OffsetY\", float) = 0\r\n\r\n    _ClipRect          
        (\"Clip Rect\", vector) = (-32767, -32767, 32767, 32767)\r\n    _MaskSoftnessX     
        (\"Mask SoftnessX\", float) = 0\r\n    _MaskSoftnessY      (\"Mask SoftnessY\",
        float) = 0\r\n    \r\n    _StencilComp        (\"Stencil Comparison\", Float)
        = 8\r\n    _Stencil            (\"Stencil ID\", Float) = 0\r\n    _StencilOp         
        (\"Stencil Operation\", Float) = 0\r\n    _StencilWriteMask   (\"Stencil
        Write Mask\", Float) = 255\r\n    _StencilReadMask    (\"Stencil Read Mask\",
        Float) = 255\r\n    \r\n    _ColorMask          (\"Color Mask\", Float) =
        15\r\n\r\n    _BLENDMODES_StencilId (\"Stencil ID\", Float) = 0\r\n       
        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\", Float) = 0\r\n       
        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader
        {\r\n    Tags \r\n    {\r\n        \"Queue\"=\"Transparent\"\r\n        \"IgnoreProjector\"=\"True\"\r\n       
        \"RenderType\"=\"Transparent\"\r\n    }\r\n\r\n\r\n    Cull [_CullMode]\r\n   
        ZWrite Off\r\n    Lighting Off\r\n    Fog { Mode Off }\r\n    ZTest [unity_GUIZTestMode]\r\n   
        Blend One OneMinusSrcAlpha\r\n    ColorMask [_ColorMask]\r\n\r\n    GrabPass
        { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n    Pass {\r\n\r\n        Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n        #pragma vertex VertShader\r\n        #pragma fragment
        PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n        #include \"UnityCG.cginc\"\r\n       
        #include \"UnityUI.cginc\"\r\n        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        BLENDMODES_GRAB_POSITION(5)\r\n        };\r\n\r\n        BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n       
        pixel_t VertShader(vertex_t input)\r\n        {\r\n            float bold
        = step(input.texcoord1.y, 0);\r\n\r\n            float4 vert = input.vertex;\r\n           
        vert.x += _VertexOffsetX;\r\n            vert.y += _VertexOffsetY;\r\n           
        float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n            float2
        pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX, _ScaleY)
        * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n            \r\n           
        float scale = rsqrt(dot(pixelSize, pixelSize));\r\n            scale *= abs(input.texcoord1.y)
        * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3] == 0) scale
        = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                ComputeGrabScreenPos(vPosition)\r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(input.faceColor,
        input)\r\n            half d = tex2D(_MainTex, input.texcoord0.xy).a * input.param.x;\r\n           
        half4 c = input.faceColor * saturate(d - input.param.w);\r\n            \r\n       
        #ifdef OUTLINE_ON\r\n            c = lerp(input.outlineColor, input.faceColor,
        saturate(d - input.param.z));\r\n            c *= saturate(d - input.param.y);\r\n       
        #endif\r\n\r\n        #if UNDERLAY_ON\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y)
        * (1 - c.a);\r\n        #endif\r\n\r\n        #if UNDERLAY_INNER\r\n           
        half sd = saturate(d - input.param.z);\r\n            d = tex2D(_MainTex,
        input.texcoord1.xy).a * input.underlayParam.x;\r\n            c += float4(_UnderlayColor.rgb
        * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y))
        * sd * (1 - c.a);\r\n        #endif\r\n\r\n        // Alternative implementation
        to UnityGet2DClipping with support for softness.\r\n        #if UNITY_UI_CLIP_RECT\r\n           
        half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n           
        c *= m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n    Pass {\r\n\r\n        Stencil
        { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n        #pragma vertex VertShader\r\n        #pragma fragment
        PixShader\r\n        #pragma shader_feature __ OUTLINE_ON\r\n        #pragma
        shader_feature __ UNDERLAY_ON UNDERLAY_INNER\r\n        \r\n\r\n        #pragma
        multi_compile __ UNITY_UI_CLIP_RECT\r\n        #pragma multi_compile __ UNITY_UI_ALPHACLIP\r\n       
        \r\n\r\n        #include \"UnityCG.cginc\"\r\n        #include \"UnityUI.cginc\"\r\n       
        // #include \"TMPro_Properties.cginc\"\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n// UI Editable properties\r\nuniform sampler2D  
        _FaceTex;                   // Alpha : Signed Distance\r\nuniform float      
        _FaceUVSpeedX;\r\nuniform float       _FaceUVSpeedY;\r\nuniform fixed4     
        _FaceColor;                 // RGBA : Color + Opacity\r\nuniform float      
        _FaceDilate;                // v[ 0, 1]\r\nuniform float       _OutlineSoftness;          
        // v[ 0, 1]\r\n\r\nuniform sampler2D   _OutlineTex;                // RGBA
        : Color + Opacity\r\nuniform float       _OutlineUVSpeedX;\r\nuniform float      
        _OutlineUVSpeedY;\r\nuniform fixed4      _OutlineColor;              // RGBA
        : Color + Opacity\r\nuniform float       _OutlineWidth;              // v[
        0, 1]\r\n\r\nuniform float       _Bevel;                     // v[ 0, 1]\r\nuniform
        float       _BevelOffset;               // v[-1, 1]\r\nuniform float      
        _BevelWidth;                // v[-1, 1]\r\nuniform float       _BevelClamp;               
        // v[ 0, 1]\r\nuniform float       _BevelRoundness;            // v[ 0, 1]\r\n\r\nuniform
        sampler2D   _BumpMap;                   // Normal map\r\nuniform float      
        _BumpOutline;               // v[ 0, 1]\r\nuniform float       _BumpFace;                 
        // v[ 0, 1]\r\n\r\nuniform samplerCUBE _Cube;                      // Cube
        / sphere map\r\nuniform fixed4      _ReflectFaceColor;          // RGB intensity\r\nuniform
        fixed4      _ReflectOutlineColor;\r\n//uniform float     _EnvTiltX;                 
        // v[-1, 1]\r\n//uniform float     _EnvTiltY;                  // v[-1, 1]\r\nuniform
        float3      _EnvMatrixRotation;\r\nuniform float4x4    _EnvMatrix;\r\n\r\nuniform
        fixed4      _SpecularColor;             // RGB intensity\r\nuniform float      
        _LightAngle;                // v[ 0,Tau]\r\nuniform float       _SpecularPower;            
        // v[ 0, 1]\r\nuniform float       _Reflectivity;              // v[ 5, 15]\r\nuniform
        float       _Diffuse;                   // v[ 0, 1]\r\nuniform float      
        _Ambient;                   // v[ 0, 1]\r\n\r\nuniform fixed4      _UnderlayColor;            
        // RGBA : Color + Opacity\r\nuniform float       _UnderlayOffsetX;          
        // v[-1, 1]\r\nuniform float       _UnderlayOffsetY;           // v[-1, 1]\r\nuniform
        float       _UnderlayDilate;            // v[-1, 1]\r\nuniform float      
        _UnderlaySoftness;          // v[ 0, 1]\r\n\r\nuniform fixed4      _GlowColor;                
        // RGBA : Color + Intesity\r\nuniform float       _GlowOffset;               
        // v[-1, 1]\r\nuniform float       _GlowOuter;                 // v[ 0, 1]\r\nuniform
        float       _GlowInner;                 // v[ 0, 1]\r\nuniform float      
        _GlowPower;                 // v[ 1, 1/(1+4*4)]\r\n\r\n// API Editable properties\r\nuniform
        float       _ShaderFlags;\r\nuniform float       _WeightNormal;\r\nuniform
        float       _WeightBold;\r\n\r\nuniform float       _ScaleRatioA;\r\nuniform
        float       _ScaleRatioB;\r\nuniform float       _ScaleRatioC;\r\n\r\nuniform
        float       _VertexOffsetX;\r\nuniform float       _VertexOffsetY;\r\n\r\n//uniform
        float     _UseClipRect;\r\nuniform float       _MaskID;\r\nuniform sampler2D  
        _MaskTex;\r\nuniform float4      _MaskCoord;\r\nuniform float4      _ClipRect; 
        // bottom left(x,y) : top right(z,w)\r\n//uniform float     _MaskWipeControl;\r\n//uniform
        float     _MaskEdgeSoftness;\r\n//uniform fixed4        _MaskEdgeColor;\r\n//uniform
        bool      _MaskInverse;\r\n\r\nuniform float       _MaskSoftnessX;\r\nuniform
        float       _MaskSoftnessY;\r\n\r\n// Font Atlas properties\r\nuniform sampler2D  
        _MainTex;\r\nuniform float       _TextureWidth;\r\nuniform float       _TextureHeight;\r\nuniform
        float       _GradientScale;\r\nuniform float       _ScaleX;\r\nuniform float      
        _ScaleY;\r\nuniform float       _PerspectiveFilter;\r\n////////////////////////////////////////////////////////
        TMPro_Properties.cginc\r\n\r\n        #include \"../../BlendModesCG.cginc\"\r\n\r\n       
        struct vertex_t {\r\n            float4  vertex          : POSITION;\r\n           
        float3  normal          : NORMAL;\r\n            fixed4  color          
        : COLOR;\r\n            float2  texcoord0       : TEXCOORD0;\r\n           
        float2  texcoord1       : TEXCOORD1;\r\n            \r\n        };\r\n\r\n       
        struct pixel_t {\r\n            float4  vertex          : SV_POSITION;\r\n           
        fixed4  faceColor       : COLOR;\r\n            fixed4  outlineColor    :
        COLOR1;\r\n            float4  texcoord0       : TEXCOORD0;            //
        Texture UV, Mask UV\r\n            half4   param           : TEXCOORD1;           
        // Scale(x), BiasIn(y), BiasOut(z), Bias(w)\r\n            half4   mask           
        : TEXCOORD2;            // Position in clip space(xy), Softness(zw)\r\n       
        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n            float4  texcoord1      
        : TEXCOORD3;            // Texture UV, alpha, reserved\r\n            half2  
        underlayParam   : TEXCOORD4;            // Scale(x), Bias(y)\r\n        #endif\r\n           
        \r\n        };\r\n\r\n        \r\n\r\n        pixel_t VertShader(vertex_t
        input)\r\n        {\r\n            float bold = step(input.texcoord1.y, 0);\r\n\r\n           
        float4 vert = input.vertex;\r\n            vert.x += _VertexOffsetX;\r\n           
        vert.y += _VertexOffsetY;\r\n            float4 vPosition = UnityObjectToClipPos(vert);\r\n\r\n           
        float2 pixelSize = vPosition.w;\r\n            pixelSize /= float2(_ScaleX,
        _ScaleY) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));\r\n           
        \r\n            float scale = rsqrt(dot(pixelSize, pixelSize));\r\n           
        scale *= abs(input.texcoord1.y) * _GradientScale * 1.5;\r\n            if(UNITY_MATRIX_P[3][3]
        == 0) scale = lerp(abs(scale) * (1 - _PerspectiveFilter), scale, abs(dot(UnityObjectToWorldNormal(input.normal.xyz),
        normalize(WorldSpaceViewDir(vert)))));\r\n\r\n            float weight =
        lerp(_WeightNormal, _WeightBold, bold) / 4.0;\r\n            weight = (weight
        + _FaceDilate) * _ScaleRatioA * 0.5;\r\n\r\n            float layerScale
        = scale;\r\n\r\n            scale /= 1 + (_OutlineSoftness * _ScaleRatioA
        * scale);\r\n            float bias = (0.5 - weight) * scale - 0.5;\r\n           
        float outline = _OutlineWidth * _ScaleRatioA * 0.5 * scale;\r\n\r\n           
        float opacity = input.color.a;\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        opacity = 1.0;\r\n        #endif\r\n\r\n            fixed4 faceColor = fixed4(input.color.rgb,
        opacity) * _FaceColor;\r\n            faceColor.rgb *= faceColor.a;\r\n\r\n           
        fixed4 outlineColor = _OutlineColor;\r\n            outlineColor.a *= opacity;\r\n           
        outlineColor.rgb *= outlineColor.a;\r\n            outlineColor = lerp(faceColor,
        outlineColor, sqrt(min(1.0, (outline * 2))));\r\n\r\n        #if (UNDERLAY_ON
        | UNDERLAY_INNER)\r\n\r\n            layerScale /= 1 + ((_UnderlaySoftness
        * _ScaleRatioC) * layerScale);\r\n            float layerBias = (.5 - weight)
        * layerScale - .5 - ((_UnderlayDilate * _ScaleRatioC) * .5 * layerScale);\r\n\r\n           
        float x = -(_UnderlayOffsetX * _ScaleRatioC) * _GradientScale / _TextureWidth;\r\n           
        float y = -(_UnderlayOffsetY * _ScaleRatioC) * _GradientScale / _TextureHeight;\r\n           
        float2 layerOffset = float2(x, y);\r\n        #endif\r\n\r\n            //
        Generate UV for the Masking Texture\r\n            float4 clampedRect = clamp(_ClipRect,
        -2e10, 2e10);\r\n            float2 maskUV = (vert.xy - clampedRect.xy) /
        (clampedRect.zw - clampedRect.xy);\r\n\r\n            // Structure for pixel
        shader\r\n            pixel_t output = {\r\n                vPosition,\r\n               
        faceColor,\r\n                outlineColor,\r\n                float4(input.texcoord0.x,
        input.texcoord0.y, maskUV.x, maskUV.y),\r\n                half4(scale, bias
        - outline, bias + outline, bias),\r\n                half4(vert.xy * 2 -
        clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_MaskSoftnessX, _MaskSoftnessY)
        + pixelSize.xy)),\r\n            #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n               
        float4(input.texcoord0 + layerOffset, input.color.a, 0),\r\n               
        half2(layerScale, layerBias),\r\n            #endif\r\n                \r\n           
        };\r\n\r\n            return output;\r\n        }\r\n\r\n\r\n        // PIXEL
        SHADER\r\n        \r\n        \r\n        fixed4 PixShader(pixel_t input)
        : SV_Target\r\n        {\r\n            \r\n            half d = tex2D(_MainTex,
        input.texcoord0.xy).a * input.param.x;\r\n            half4 c = input.faceColor
        * saturate(d - input.param.w);\r\n            \r\n        #ifdef OUTLINE_ON\r\n           
        c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));\r\n           
        c *= saturate(d - input.param.y);\r\n        #endif\r\n\r\n        #if UNDERLAY_ON\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d
        - input.underlayParam.y) * (1 - c.a);\r\n        #endif\r\n\r\n        #if
        UNDERLAY_INNER\r\n            half sd = saturate(d - input.param.z);\r\n           
        d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;\r\n           
        c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1
        - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);\r\n        #endif\r\n\r\n       
        // Alternative implementation to UnityGet2DClipping with support for softness.\r\n       
        #if UNITY_UI_CLIP_RECT\r\n            half2 m = saturate((_ClipRect.zw -
        _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);\r\n            c *=
        m.x * m.y;\r\n        #endif\r\n\r\n        #if (UNDERLAY_ON | UNDERLAY_INNER)\r\n           
        c *= input.texcoord1.z;\r\n        #endif\r\n\r\n        #if UNITY_UI_ALPHACLIP\r\n           
        clip(c.a - 0.001);\r\n        #endif\r\n\r\n            \r\n            return
        c;\r\n        }\r\n        ENDCG\r\n    }\r\n}\r\n\r\nCustomEditor \"TMPro.EditorUtilities.TMP_SDFShaderGUI\"\r\nFallback
        \"TextMeshPro/Mobile/Distance Field\"\r\n}\r\n\r\n"
  - packagePath: UIDefault
    files:
    - filePath: BlendModes-UIDefault-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma only_renderers framebufferfetch\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n   
        }\r\n\r\n    Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/FramebufferMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma only_renderers framebufferfetch\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/Grab\"\r\n{\r\n    Properties\r\n   
        {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\", 2D) = \"white\"
        {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n        _StencilComp
        (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil ID\",
        Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/GrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/Overlay\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/OverlayMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/UnifiedGrab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        \r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefault-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefault/UnifiedGrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
  - packagePath: UIDefaultFont
    files:
    - filePath: BlendModes-UIDefaultFont-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/Framebuffer\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n\tSubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma only_renderers framebufferfetch\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n   
        }\r\n\r\n    Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/FramebufferMasked\"
        \r\n{\r\n    Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font
        Texture\", 2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma only_renderers framebufferfetch\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/Grab\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n\tSubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/GrabMasked\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/Overlay\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/OverlayMasked\"
        \r\n{\r\n    Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font
        Texture\", 2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/UnifiedGrab\" \r\n{\r\n   
        Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        \r\n    }\r\n\r\n\tSubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        \r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIDefaultFont-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIDefaultFont/UnifiedGrabMasked\"
        \r\n{\r\n    Properties \r\n    {\r\n        [PerRendererData] _MainTex (\"Font
        Texture\", 2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil
        ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil
        Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal
        Stencil Comparison\", Float) = 1\r\n    }\r\n\r\n\tSubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n                color.a
        *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n\r\n                #ifdef UNITY_UI_CLIP_RECT\r\n               
        color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);\r\n               
        #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
  - packagePath: UIHsbc
    files:
    - filePath: BlendModes-UIHsbc-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/Framebuffer\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma only_renderers framebufferfetch\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n   
        }\r\n\r\n    Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/FramebufferMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil ID\",
        Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        only_renderers framebufferfetch\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                \r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\tvoid frag(v2f IN, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord)
        + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(color.rgb,
        buffer.rgb)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\tbuffer =
        color;\r\n\t            \r\n            }\r\n        ENDCG\r\n        }\r\n       
        Pass\r\n        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n                \r\n                color.rgb
        = ApplyHsbc(color.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/Grab\"\r\n{\r\n    Properties\r\n   
        {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\", 2D) = \"white\"
        {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n        _StencilComp
        (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil ID\",
        Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/GrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil ID\",
        Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        GrabPass { }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n                \r\n                color.rgb
        = ApplyHsbc(color.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/Overlay\"\r\n{\r\n    Properties\r\n   
        {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\", 2D) = \"white\"
        {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n        _StencilComp
        (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil ID\",
        Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n    }\r\n\r\n    SubShader\r\n    {\r\n       
        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        \r\n\r\n        Pass\r\n        {\r\n           
        Name \"Default\"\r\n\r\n            \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/OverlayMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        \r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_OVERLAY_TEX_COORD(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(OUT.texcoord,
        OUT)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n                \r\n                color.rgb
        = ApplyHsbc(color.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/UnifiedGrab\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        \r\n    }\r\n\r\n    SubShader\r\n   
        {\r\n        Tags\r\n        {\r\n            \"Queue\"=\"Transparent\"\r\n           
        \"IgnoreProjector\"=\"True\"\r\n            \"RenderType\"=\"Transparent\"\r\n           
        \"PreviewType\"=\"Plane\"\r\n            \"CanUseSpriteAtlas\"=\"True\"\r\n       
        }\r\n\r\n        Stencil\r\n        {\r\n            Ref [_Stencil]\r\n           
        Comp [_StencilComp]\r\n            Pass [_StencilOp]\r\n            ReadMask
        [_StencilReadMask]\r\n            WriteMask [_StencilWriteMask]\r\n       
        }\r\n\r\n        Cull Off\r\n        Lighting Off\r\n        ZWrite Off\r\n       
        ZTest [unity_GUIZTestMode]\r\n        Blend SrcAlpha OneMinusSrcAlpha\r\n       
        ColorMask [_ColorMask]\r\n\r\n        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\"
        }\r\n\r\n        Pass\r\n        {\r\n            Name \"Default\"\r\n\r\n           
        \r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            struct appdata_t\r\n           
        {\r\n                float4 vertex   : POSITION;\r\n                float4
        color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
    - filePath: BlendModes-UIHsbc-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UIHsbc/UnifiedGrabMasked\"\r\n{\r\n   
        Properties\r\n    {\r\n        [PerRendererData] _MainTex (\"Sprite Texture\",
        2D) = \"white\" {}\r\n        _Color (\"Tint\", Color) = (1,1,1,1)\r\n\r\n       
        _StencilComp (\"Stencil Comparison\", Float) = 8\r\n        _Stencil (\"Stencil
        ID\", Float) = 0\r\n        _StencilOp (\"Stencil Operation\", Float) = 0\r\n       
        _StencilWriteMask (\"Stencil Write Mask\", Float) = 255\r\n        _StencilReadMask
        (\"Stencil Read Mask\", Float) = 255\r\n\r\n        _ColorMask (\"Color Mask\",
        Float) = 15\r\n\r\n        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (\"Use
        Alpha Clip\", Float) = 0\r\n\r\n        _Hue(\"Hue\", Range(0.0, 1.0)) =
        0\r\n        _Saturation(\"Saturation\", Range(-1.0, 1.0)) = 0\r\n       
        _Brightness(\"Brightness\", Range(-1.0, 1.0)) = 0\r\n        _Contrast(\"Contrast\",
        Range(-1.0, 1.0)) = 0\r\n\r\n        _BLENDMODES_StencilId (\"Stencil ID\",
        Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n    }\r\n\r\n    SubShader\r\n    {\r\n        Tags\r\n       
        {\r\n            \"Queue\"=\"Transparent\"\r\n            \"IgnoreProjector\"=\"True\"\r\n           
        \"RenderType\"=\"Transparent\"\r\n            \"PreviewType\"=\"Plane\"\r\n           
        \"CanUseSpriteAtlas\"=\"True\"\r\n        }\r\n\r\n\r\n        Cull Off\r\n       
        Lighting Off\r\n        ZWrite Off\r\n        ZTest [unity_GUIZTestMode]\r\n       
        Blend SrcAlpha OneMinusSrcAlpha\r\n        ColorMask [_ColorMask]\r\n\r\n       
        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n        Pass\r\n       
        {\r\n            Name \"Default\"\r\n\r\n            Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            \r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"UnityUI.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        #pragma multi_compile_local __ UNITY_UI_CLIP_RECT\r\n            #pragma
        multi_compile_local __ UNITY_UI_ALPHACLIP\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        struct appdata_t\r\n            {\r\n                float4 vertex   : POSITION;\r\n               
        float4 color    : COLOR;\r\n                float2 texcoord : TEXCOORD0;\r\n               
        \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n            };\r\n\r\n           
        struct v2f\r\n            {\r\n                float4 vertex   : SV_POSITION;\r\n               
        fixed4 color    : COLOR;\r\n                float2 texcoord  : TEXCOORD0;\r\n               
        float4 worldPosition : TEXCOORD1;\r\n                BLENDMODES_GRAB_POSITION(2)\r\n               
        UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n            sampler2D
        _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(OUT,
        OUT.vertex)\r\n\r\n                OUT.color = v.color * _Color;\r\n               
        return OUT;\r\n            }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f
        IN) : SV_Target\r\n            {\r\n                half4 color = (tex2D(_MainTex,
        IN.texcoord) + _TextureSampleAdd) * IN.color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(color,
        IN)\r\n                \r\n                color.rgb = ApplyHsbc(color.rgb,
        fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n        Pass\r\n       
        {\r\n            Name \"DefaultNormalBlend\"\r\n\r\n            Stencil {
        Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_NormalStencilComp] }\r\n\r\n       
        CGPROGRAM\r\n            #pragma vertex vert\r\n            #pragma fragment
        frag\r\n            #pragma target 2.0\r\n            \r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"UnityUI.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            #pragma multi_compile_local
        __ UNITY_UI_CLIP_RECT\r\n            #pragma multi_compile_local __ UNITY_UI_ALPHACLIP\r\n           
        \r\n\r\n            struct appdata_t\r\n            {\r\n               
        float4 vertex   : POSITION;\r\n                float4 color    : COLOR;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f\r\n            {\r\n                float4
        vertex   : SV_POSITION;\r\n                fixed4 color    : COLOR;\r\n               
        float2 texcoord  : TEXCOORD0;\r\n                float4 worldPosition : TEXCOORD1;\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            fixed4 _Color;\r\n            fixed4 _TextureSampleAdd;\r\n           
        float4 _ClipRect;\r\n            float4 _MainTex_ST;\r\n            fixed
        _Hue, _Saturation, _Brightness, _Contrast;\r\n            \r\n\r\n           
        v2f vert(appdata_t v)\r\n            {\r\n                v2f OUT;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);\r\n               
        OUT.worldPosition = v.vertex;\r\n                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);\r\n               
        OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n\r\n               
        OUT.color = v.color * _Color;\r\n                return OUT;\r\n           
        }\r\n\r\n\t\t\t\r\n            fixed4 frag(v2f IN) : SV_Target\r\n           
        {\r\n                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd)
        * IN.color;\r\n                \r\n                \r\n                color.rgb
        = ApplyHsbc(color.rgb, fixed4(_Hue, _Saturation, _Brightness, _Contrast));\r\n\r\n               
        #ifdef UNITY_UI_CLIP_RECT\r\n                color.a *= UnityGet2DClipping(IN.worldPosition.xy,
        _ClipRect);\r\n                #endif\r\n\r\n                #ifdef UNITY_UI_ALPHACLIP\r\n               
        clip (color.a - 0.001);\r\n                #endif\r\n\r\n\t\t\t\t\r\n\t           
        return color;\r\n            }\r\n        ENDCG\r\n        }\r\n    }\r\n\r\n   
        Fallback \"UI/Default\"\r\n}\r\n"
  - packagePath: UnlitTransparent
    files:
    - filePath: BlendModes-UnlitTransparent-Framebuffer.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/Framebuffer\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    \r\n}\r\n\r\nSubShader
        {\r\n    Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        \r\n\r\n    Pass {\r\n\r\n        \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            #pragma
        only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            void frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord)
        * _Color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        buffer = col;\r\n                \r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-FramebufferMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/FramebufferMasked\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader {\r\n   
        Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        \r\n\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            #pragma
        only_renderers framebufferfetch\r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            void frag(v2f i, inout fixed4 buffer : SV_Target)\r\n           
        \r\n            {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord)
        * _Color;\r\n                BLENDMODES_BLEND_PIXEL_FRAMEBUFFER(col.rgb,
        buffer.rgb)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        buffer = col;\r\n                \r\n            }\r\n        ENDCG\r\n   
        }\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_NormalStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        \r\n\r\n            #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            \r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord) * _Color;\r\n               
        \r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-Grab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/Grab\" {\r\nProperties
        {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\" {}\r\n    _Color
        (\"Tint Color\", Color) = (1,1,1,1)\r\n    \r\n}\r\n\r\nSubShader {\r\n   
        Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        GrabPass { }\r\n\r\n    Pass {\r\n\r\n        \r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            struct appdata_t
        {\r\n                float4 vertex : POSITION;\r\n                float2
        texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_GRAB_POSITION(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-GrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/GrabMasked\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader {\r\n   
        Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        GrabPass { }\r\n\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId]
        Comp [_BLENDMODES_BlendStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        #pragma multi_compile_local BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY
        BLENDMODES_MODE_COLORBURN BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR
        BLENDMODES_MODE_LIGHTEN BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE
        BLENDMODES_MODE_LINEARDODGE BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY
        BLENDMODES_MODE_SOFTLIGHT BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT
        BLENDMODES_MODE_LINEARLIGHT BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX
        BLENDMODES_MODE_DIFFERENCE BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT
        BLENDMODES_MODE_DIVIDE BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR
        BLENDMODES_MODE_LUMINOSITY\r\n\r\n            #include \"UnityCG.cginc\"\r\n           
        #include \"../../BlendModesCG.cginc\"\r\n\r\n            struct appdata_t
        {\r\n                float4 vertex : POSITION;\r\n                float2
        texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_GRAB_POSITION(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_GRAB(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_NormalStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        \r\n\r\n            #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            \r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord) * _Color;\r\n               
        \r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-Overlay.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/Overlay\" {\r\nProperties
        {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\" {}\r\n    _Color
        (\"Tint Color\", Color) = (1,1,1,1)\r\n    _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)\r\n}\r\n\r\nSubShader {\r\n    Tags {\"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n    LOD 100\r\n\r\n   
        ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n    \r\n\r\n   
        Pass {\r\n\r\n        \r\n\r\n        CGPROGRAM\r\n            #pragma vertex
        vert\r\n            #pragma fragment frag\r\n            #pragma target 2.0\r\n           
        #pragma multi_compile_fog\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord,
        o)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-OverlayMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/OverlayMasked\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    _BLENDMODES_OverlayTexture(\"Overlay
        Texture\", 2D) = \"white\" {}\r\n        _BLENDMODES_OverlayColor(\"Overlay
        Color\", Color) = (1,1,1,1)_BLENDMODES_StencilId (\"Stencil ID\", Float)
        = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend Stencil Comparison\",
        Float) = 0\r\n        _BLENDMODES_NormalStencilComp (\"Normal Stencil Comparison\",
        Float) = 1\r\n}\r\n\r\nSubShader {\r\n    Tags {\"Queue\"=\"Transparent\"
        \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n    LOD 100\r\n\r\n   
        ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n    \r\n\r\n   
        Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_fog\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_OVERLAY_TEX_COORD(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_OVERLAY_VARIABLES\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_TRANSFORM_OVERLAY_TEX(o.texcoord,
        o)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_OVERLAY(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_NormalStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        \r\n\r\n            #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            \r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord) * _Color;\r\n               
        \r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-UnifiedGrab.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/UnifiedGrab\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    \r\n}\r\n\r\nSubShader
        {\r\n    Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n    Pass {\r\n\r\n       
        \r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_fog\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_GRAB_POSITION(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
    - filePath: BlendModes-UnlitTransparent-UnifiedGrabMasked.shader
      fileContent: "\r\nShader \"Hidden/BlendModes/UnlitTransparent/UnifiedGrabMasked\"
        {\r\nProperties {\r\n    _MainTex (\"Base (RGB) Trans (A)\", 2D) = \"white\"
        {}\r\n    _Color (\"Tint Color\", Color) = (1,1,1,1)\r\n    _BLENDMODES_StencilId
        (\"Stencil ID\", Float) = 0\r\n        _BLENDMODES_BlendStencilComp (\"Blend
        Stencil Comparison\", Float) = 0\r\n        _BLENDMODES_NormalStencilComp
        (\"Normal Stencil Comparison\", Float) = 1\r\n}\r\n\r\nSubShader {\r\n   
        Tags {\"Queue\"=\"Transparent\" \"IgnoreProjector\"=\"True\" \"RenderType\"=\"Transparent\"}\r\n   
        LOD 100\r\n\r\n    ZWrite Off\r\n    Blend SrcAlpha OneMinusSrcAlpha\r\n\r\n   
        GrabPass { \"_BLENDMODES_UnifiedGrabTexture\" }\r\n\r\n    Pass {\r\n\r\n       
        Stencil { Ref [_BLENDMODES_StencilId] Comp [_BLENDMODES_BlendStencilComp]
        }\r\n\r\n        CGPROGRAM\r\n            #pragma vertex vert\r\n           
        #pragma fragment frag\r\n            #pragma target 2.0\r\n            #pragma
        multi_compile_fog\r\n            \r\n            #pragma multi_compile_local
        BLENDMODES_MODE_DARKEN BLENDMODES_MODE_MULTIPLY BLENDMODES_MODE_COLORBURN
        BLENDMODES_MODE_LINEARBURN BLENDMODES_MODE_DARKERCOLOR BLENDMODES_MODE_LIGHTEN
        BLENDMODES_MODE_SCREEN BLENDMODES_MODE_COLORDODGE BLENDMODES_MODE_LINEARDODGE
        BLENDMODES_MODE_LIGHTERCOLOR BLENDMODES_MODE_OVERLAY BLENDMODES_MODE_SOFTLIGHT
        BLENDMODES_MODE_HARDLIGHT BLENDMODES_MODE_VIVIDLIGHT BLENDMODES_MODE_LINEARLIGHT
        BLENDMODES_MODE_PINLIGHT BLENDMODES_MODE_HARDMIX BLENDMODES_MODE_DIFFERENCE
        BLENDMODES_MODE_EXCLUSION BLENDMODES_MODE_SUBTRACT BLENDMODES_MODE_DIVIDE
        BLENDMODES_MODE_HUE BLENDMODES_MODE_SATURATION BLENDMODES_MODE_COLOR BLENDMODES_MODE_LUMINOSITY\r\n\r\n           
        #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        BLENDMODES_GRAB_POSITION(2)\r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n           
        };\r\n\r\n            sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n           
        fixed4 _Color;\r\n            BLENDMODES_UNIFIED_GRAB_TEXTURE_SAMPLER\r\n\r\n           
        v2f vert (appdata_t v)\r\n            {\r\n                v2f o;\r\n               
        UNITY_SETUP_INSTANCE_ID(v);\r\n                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n               
        o.vertex = UnityObjectToClipPos(v.vertex);\r\n                o.texcoord
        = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                BLENDMODES_COMPUTE_GRAB_POSITION(o,
        o.vertex)\r\n                UNITY_TRANSFER_FOG(o,o.vertex);\r\n               
        return o;\r\n            }\r\n\r\n            \r\n            fixed4 frag
        (v2f i) : SV_Target\r\n            {\r\n                fixed4 col = tex2D(_MainTex,
        i.texcoord) * _Color;\r\n                BLENDMODES_BLEND_PIXEL_UNIFIED_GRAB(col,
        i)\r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n    Pass {\r\n\r\n        Stencil { Ref [_BLENDMODES_StencilId] Comp
        [_BLENDMODES_NormalStencilComp] }\r\n\r\n        CGPROGRAM\r\n           
        #pragma vertex vert\r\n            #pragma fragment frag\r\n            #pragma
        target 2.0\r\n            #pragma multi_compile_fog\r\n            \r\n           
        \r\n\r\n            #include \"UnityCG.cginc\"\r\n            #include \"../../BlendModesCG.cginc\"\r\n\r\n           
        struct appdata_t {\r\n                float4 vertex : POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                \r\n                UNITY_VERTEX_INPUT_INSTANCE_ID\r\n           
        };\r\n\r\n            struct v2f {\r\n                float4 vertex : SV_POSITION;\r\n               
        float2 texcoord : TEXCOORD0;\r\n                UNITY_FOG_COORDS(1)\r\n               
        \r\n                UNITY_VERTEX_OUTPUT_STEREO\r\n            };\r\n\r\n           
        sampler2D _MainTex;\r\n            float4 _MainTex_ST;\r\n            fixed4
        _Color;\r\n            \r\n\r\n            v2f vert (appdata_t v)\r\n           
        {\r\n                v2f o;\r\n                UNITY_SETUP_INSTANCE_ID(v);\r\n               
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\r\n                o.vertex = UnityObjectToClipPos(v.vertex);\r\n               
        o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);\r\n                \r\n               
        UNITY_TRANSFER_FOG(o,o.vertex);\r\n                return o;\r\n           
        }\r\n\r\n            \r\n            fixed4 frag (v2f i) : SV_Target\r\n           
        {\r\n                fixed4 col = tex2D(_MainTex, i.texcoord) * _Color;\r\n               
        \r\n                UNITY_APPLY_FOG(i.fogCoord, col);\r\n               
        \r\n                return col;\r\n            }\r\n        ENDCG\r\n   
        }\r\n}\r\n\r\n    Fallback \"Unlit/Transparent\"\r\n}\r\n"
